<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">

<head>
    <title>Modern Development with Office 365 and SharePoint Online</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta content="NumberOfDays" http-equiv="5" />

    <!--[if gte mso 9]>
		<xml>
			<mso:CustomDocumentProperties>
			<mso:ContentTypeId msdt:dt="string">0x0101009C33340F38E14D1EABEAC83093A8F1720070F889962546EE42AD9D5D8FDE36050F</mso:ContentTypeId>
			<mso:Order msdt:dt="string">1600.00000000000</mso:Order>
			</mso:CustomDocumentProperties>
		</xml>
	<![endif]-->
</head>

<body>
    <h2>Learning goals</h2>
    <p>
        Microsoft 365 offers exciting and contemporary ways to develop for SharePoint, Microsoft Teams, and other parts of Microsoft 365
        , following the general industry trend towards client-side development. This course equips you with the essential knowledge and 
        best practices on the tools and techniques needed to add your creations to the Microsoft 365 ecosystem. 
        You’ll learn everything from the client-side object model to remote scripting and PnP, and even SharePoint Framework and 
        Microsoft Teams. With this course, you’ll be able to create stunning and collaborative applications.
    </p>

    <h2>Target Audience</h2>
    <p>
        Developers who want to automate or extend Microsoft 365 or want to integrate their applications with Microsoft 365. 
        Being familiar with .NET and JavaScript is required.
    </p>

    <h2>Course Outline</h2>
    <h4>Introduction to SharePoint and Office 365 Development</h4>
    <p>
        This module will give you an overview of the different parts of Office 365 and how these integrate together, for getting the bigger picture. 
	You will also get a broad view of the different development options you have, starting from the classic Farm Solutions to the modern SharePoint Framework. 
    </p>
    <ul>
        <li>Microsoft 365 Overview</li>
        <li>SharePoint Development Options</li>
        <li>Overview of Microsoft 365 APIs</li>
        <li>LAB: Setting up the Development Environment</li>
    </ul>
    <h4>Microsoft Identity Platform</h4>
    <p>
        With Microsoft Identity Platform, authentication has been simplified for developers by providing identity as a
		service, using industry-standard protocols like OAuth 2.0 and OpenID Connect. Participants will learn about user
		authentication in Entra ID, how to register applications and how to authenticate applications depending on the
		application type.
    </p>
    <ul>
        <li>Microsoft Identity Platform Overview</li>
        <li>Registering your Apps in Entra ID</li>
        <li>OAuth Authentication Flows</li>
        <li>User & Application Authentication </li>
        <li>Microsoft Authentication Libraries (MSAL)</li>
        <li>LAB: Microsoft Identity Platform</li>
    </ul>
    <h4>Microsoft Graph</h4>
    <p>
        Microsoft 365 provides you with one single endpoint allowing you to communicate with all Microsoft 365 services. This
		API is known as the <i>Microsoft Graph</i> and allows developers to access data, intelligence and insights
		coming from the Microsoft cloud.
    </p>
    <ul>
        <li>The Microsoft Graph API: Mail, Contacts, Calendar, People, Teams...</li>
        <li>The Microsoft Graph SDK</li>
        <li>Graph Extensions</li>
        <li>Graph Webhooks</li>
        <li>LAB: Fetching Mails with Graph</li>
    </ul>
    <h4>Customizing Microsoft Search with Microsoft Graph</h4>
    <p>
        Microsoft Search makes your MS365 data searchable. Additional content sources can be added by using additional Connectors. 
		These connectors use the Graph Search API for extending Search. In this chapter we will use the Graph API for using and extending Microsoft Search
    </p>
    <ul>
        <li>Verticals, Result Types, Search Result Layouts, Filters and Microsoft Graph Connectors</li>
        <li>Querying Data with the Search API</li>
        <li>Indexing External Data with the Search API</li>
    </ul>
    <h4>Client Side Development using CSOM</h4>
    <p>This module will teach you how to do client side development using the Client Side Object Model (CSOM), both in .NET and JavaScript. </p>
    <ul>
        <li>Authentication with CSOM</li>
        <li>Consuming SharePoint Data</li>
        <li>CSOM for JavaScript</li>
        <li>LAB: Creating a SharePoint Explorer using CSOM</li>
    </ul>
    <h4>REST and OData</h4>
    <p>
        SharePoint provides REST/OData endpoints to communicate with exposing the same operations as CSOM does. 
		One of the advantages of using the REST/OData APIs is that you are no longer tied to .NET or JavaScript for development, but have
		the choice of any webtechnology, server- or client-side.
    </p>
    <ul>
        <li>The SharePoint REST APIs</li>
        <li>Authentication</li>
        <li>OData Querying Syntax</li>
        <li>Batch Processing</li>
        <li>Digest Tokens</li>
    </ul>
    <h4>Introduction to SharePoint Framework</h4>
    <p>
        The SharePoint Framework (SPFx) is the most recent development technology which fits into the modern SharePoint development story,
		providing support for client-side SharePoint and O365 development, and easy integration with SharePoint and O365 data. 
		This module introduces the SharePoint Framework and discusses the possibilities and the open-source toolset used.
    </p>
    <ul>
        <li>SPFx Overview</li>
        <li>The SharePoint Framework Toolset: Yeoman, npm, gulp, TypeScript and React</li>
        <li>SPFx Roadmap</li>
    </ul>

    <h4>Building Client-Side Web Parts with SharePoint Framework</h4>
    <p>
        The SharePoint Framework allows us to build modern client-side web parts. 
		During this module, we will create basic webparts and will explore the structure of the webparts and the SPFx projects.
    </p>
    <ul>
        <li>Client-side Web Part Fundamentals</li>
        <li>SPFx Project Structure</li>
        <li>Adding multiple Web Parts to a Project</li>
        <li>Creating Full Page Apps</li>
        <li>LAB: Creating an SPFx webpart</li>
    </ul>
    <h4>SPFx Deployment Overview</h4>
    <p>
        SPFx solutions need to be deployed through a SharePoint App Catalog. In this chapter we will learn what the options are when deploying.
    </p>
    <ul>
        <li>What is an App Catalog?</li>
        <li>Deploying your Bundle and Package</li>
        <li>Tenant-wide, Site Collection or Site Specific Deployments</li>
        <li>LAB - Deploying SPFx Projects</li>
    </ul>
    <h4>The Fluent UI Framework</h4>
    <p>
        Making sure your applications share the same look and feel as microsoft 365 can be a challenge. Luckily there
		is a UI framework, called Fluent UI, which allows you to apply the same look and feel to your
		applications,so they blend with their environment.
    </p>
    <ul>
        <li>Branding your Applications with Fluent UI Framework</li>
        <li>Fluent UI Styles</li>
        <li>Fluent UI components</li>
    </ul>
    <h4>Using the Microsoft Graph Toolkit</h4>
    <p>
        The Graph toolkit contains a set of web components which makes it easier to make solutions targetting the Graph API.
        We will have a look at the components offered and how we can use them
    </p>
    <ul>
        <li>Graph Toolkit</li>
        <li>React Components</li>
        <li>Building Teams Tab</li>
        <li>Customizing Graph Toolkit Components</li>
        <li>Authentication Providers</li>
    </ul>
    <h4>Styling your SharePoint Sites</h4>
    <p>
        With the modern UI comes modern ways to change the design of your sites, columns, lists and libraries. Gone are the days of saving sites as templates 
		and using JavaScript for styling your fields and listviews. The modern approach uses a JSON-based technique for defining templates and designs.
    </p>
    <ul>
        <li>Creating Site Templates</li>
        <li>Extracting Site Templates with PowerShell</li>
        <li>Formatting Columns & Views</li>
        <li>LAB: Creating a Site Template</li>
    </ul>
    <h4>Responding to List Events with SharePoint Webhooks</h4>
    <p>
        You would like to respond to the manipulation of an item in a SharePoint list or library ? 
		SharePoint allows you to use webhooks, a common HTTP callback method for responding to events. This module will show you
		how to create SharePoint webhook subscriptions and how to get information about the changes on SharePoint.
    </p>
    <ul>
        <li>Webhook Subscriptions and Event Notifications</li>
        <li>Getting Change Details</li>
        <li>Debugging Webhooks</li>
    </ul>
    <h4>Microsoft 365 Patterns and Practices - PnP</h4>
    <p>
        Microsoft accomodates the Microsoft 365 Patterns and
		Practices (PnP) initiative, offering guidance and solutions on how to tackle certain problems when creating functionalities for 
		Microsoft 365. PnP provides us with extensive documentation, tools, libraries and samples
    </p>
    <ul>
        <li>The PnP Initiative</li>
        <li>Using PnP Core in your Applications</li>
        <li>Simplifying Authentication using the PnP IdentityModel</li>
        <li>Using the PnP PowerShell CmdLets</li>
    </ul>
    <h4>Remote Provisioning and Remote Timerjobs with PnP</h4>
    <p>
        Modern Microsoft 365 development is about running code remotely, so Microsoft 365 Patterns and Practices came up with a few recipes for creating remote functionality. 
		The remote provisioning-model is for creating SharePoint artifacts like sites, lists and libraries, columns, content types and more. The remote 
		timerjob model allows running remote functionality on a schedule. This module will explain these two remote models in detail.
    </p>
    <ul>
        <li>Why do we need (Remote) Provisioning?</li>
        <li>The PnP Provisioning Engine</li>
        <li>Building Remote Timerjobs</li>
        <li>LAB: Remote Provisioning</li>
        <li>LAB: Remote Timerjob</li>
    </ul>
    <h4>Microsoft Teams Development Overview</h4>
    <p>
        Microsoft Teams has quickly been adopted as <i>the</i> tool for collaboration. Providing us with functionalities for doing
		our team-work, it is also very extensible. It comes out-of-the box with different options for adding tabs, conversational bots,
		connectors to get external data, and message extensions for enriching our conversations. With the increased interest
		in Teams there is also an increased interest in adding custom functionalities to it. This module will lay out the different
		options for Teams development.
    </p>
    <ul>
        <li>Options for creating Microsoft Teams Apps</li>
        <li>The Teams SDK</li>
        <li>Adaptive Cards</li>
        <li>Microsoft Teams Toolkit</li>
        <li>App elements: Tabs, Bots, Connectors, Message Extensions</li>
        <li>LAB: Creating a Teams Tab app</li>
    </ul>
    <h4>Introduction to SharePoint Embedded</h4>
    <p>SharePoint Embedded is a cloud-based file and document management system that can be integrated into any application. 
        It is an API-only solution using Microsoft Graph API that enables app developers to harness the power of the Microsoft 365 file and document storage platform, 
        with typical SharePoint functionalities such as searching, versioning, co-authoring, ... 
    </p>
    <ul>
        <li>Why use SharePoint Embedded</li>
        <li>Setting up SharePoint Embedded</li>
        <li>SharePoint Embedded Architecture</li>
        <li>Creating SharePoint Embedded Containers</li>
        <li>Working with Files and Folders</li>
        <li>Visualizing Documents</li>
        <li>Using the Search API</li>
    </ul>
    <h4>Creating Collaborative Applications with the Microsoft Fluid Framework</h4>
    <p>Microsoft Fluid Framework is a collection of client libraries that allow multiple clients to simultaneously create and operate on shared data structures. 
        It allows real-time collaboration across applications, providing developers with 
        easy-to-use data structures which Fluid automatically keeps in sync between clients.</p>
    <ul>
        <li>The Fluid Working Flow</li>
        <li>Fluid Architecture</li>
        <li>Fluid Containers and Distributed Data Structures</li>
        <li>Testing with Tinylicious</li>
        <li>The Azure Fluid Relay</li>
    </ul>
    <h4>Low-code App Development with Power Apps</h4>
    <p>
        Development is mostly fun, but also takes a lot of time and effort. Power Apps gives us a quick and powerfull way of creating mobile-friendly applications
		that can be used in SharePoint, Teams, but also as stand-alone applications that run in the browser or on your laptop, tablet or phone. In this module we will see 
		how to start creating Power Apps, and the different options for using them in SharePoint and Teams
    </p>
    <ul>
        <li>Auto-generating Apps from your Data</li>
        <li>Using Power Apps Studio</li>
        <li>Working with Data Connections</li>
        <li>Adding screens and Controls</li>
        <li>Introduction to Edit- and Detail-forms</li>
        <li>Using Power Apps in SharePoint & Teams</li>
        <li>LAB: Building a Power App</li>
    </ul>
    <h4>Automating Business Processes with Power Automate</h4>
    <p>Power Automate allows you to create automatic processes, called flows, with a low-code approach. A flow can start automatically, triggered by something happening, like 'a new mail arrives' 
        ,the click of a button or a schedule. We can thereafter perform one or more actions, connecting to hundreds of data source  - Outlook, SharePoint, Twitter, Dynamics 365, ... 
        All of this without writing a single line of code.</p>
    <ul>
        <li>Start a Flow for a SharePoint List</li>
        <li>Start a Flow on a Schedule</li>
        <li>Adding Conditions</li>
        <li>Monitoring Flows</li>
        <li>LAB: Process Mail Attachments with Power Automate</li>
    </ul>
</body>
</html>
