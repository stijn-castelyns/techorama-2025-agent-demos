<!DOCTYPE html>
<html xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">
<head>
    <title>Developing Microsoft Dynamics 365 for Customer Engagement Solutions</title>
    <meta name="NumberOfDays" content="5" />

<!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:ContentTypeId msdt:dt="string">0x0101009C33340F38E14D1EABEAC83093A8F172000E368A887C64A940AF307C55B39BFDA3</mso:ContentTypeId>
</mso:CustomDocumentProperties>
</xml><![endif]-->
</head>
<body>
    <h2>Learning Goals</h2>
    <p>
        This course will teach developers how they can extend Dynamics 365 for Customer Engagement. 
        Dynamics 365 for Customer Engagement refers to the applications that make up the CRM portion of Dynamics 365, which includes the Sales, Customer Service, Field Service, and Project Service Automation applications.
    </p>
    <p>
        Although Microsoft Dynamics 365 for Customer Engagement has quite some out of the box customization options, many companies have requirements which can only be met by extending the existing feature set of Microsoft Dynamics 365 for Customer Engagement.
        This training course is designed to help .NET and JavaScript developers learn the various development features of both Microsoft Dynamics 365 for Customer Engagement Online and On-Premise.
    </p>

    <h2>Target audience</h2>
    <p>
        This course is targeting developers who have none or very limited Dynamics 365 for Customer Engagement development skills.
        Before attending the course, delegates must have the following prerequisite knowledge
        and experience:
        <ul>
            <li>Understanding of Web development and design</li>
            <li>Knowledge of a .NET programming language (C# or Visual Basic .NET) and JavaScript</li>
            <li>Working knowledge of Microsoft Dynamics 365 for Customer Engagement (power-user perspective)</li>
        </ul>
    </p>

    <h2>Course Outline</h2>

    <h4>Extensibility Overview</h4>
    <p>
        The goal of this module is to provide participants with an overview of the Microsoft Dataverse architecture and where the extension points are as a developer. 
    </p> 
    <ul>
        <li>Introduction to Dataverse</li>
        <li>Overview of the  Dataverse extensibility model</li>
        <li>overview of the Power Platform Developer Tooling</li>
        <li>Introducing XrmToolBox</li>
        <li>LAB: Setting up your development machine.</li>
    </ul>

    <h4>Working with the Dataverse Web API</h4>
    <p> 
        The Dataverse Web API is one of two web services you can use to work with data and metadata in Dataverse. The other is the Organization Service.
        The Dataverse Web API provides a development experience that can be used across a wide variety of programming languages, platforms, and devices to access the Dataverse data and functionality. 
        In this module, students will learn about the authentication and authorization options with the Dataverse Web API. 
    </p>
    <ul>
        <li>Introduction to the Dataverse Web API</li>
        <li>Registering client applications with Azure Active Directory</li>
        <li>Authenticate with the Dataverse Web API using OAuth 2.0 and MSAL</li>
        <li>Performing a simple Create operation using the Dataverse Web API</li>
        <li>Composing HTTP requests and error handling</li>
        <li>Dataverse Web API URL and versions</li>
        <li>The different HTTP methods and headers</li>
        <li>Executing your first HTTP requests</li>
        <li>LAB: Creating and configuring a client application for Dataverse using .NET 5.0</li>
    </ul>

    <h4>Using the Dataverse Web API</h4>
    <p> 
        The Dataverse Web API provides a modern, RESTful web service you can use to interact with data and metadata in Dataverse using a wide variety of platforms, programming languages and devices.
        This module teaches students how they can execute CRUD operations, Actions and Functions using the Dataverse Web API. 
    </p>
    <ul>
        <li>Query Data using the Dataverse Web API</li>
        <li>Creating, Updating and Deleting rows in tables</li> 
        <li>Executing batches</li>
        <li>Impersonate another user using the Dataverse Web API</li>
        <li>Detect duplicate data using the Dataverse Web API</li>
        <li>LAB: Using Postman with the Dataverse Web API</li>
    </ul>
   
    <h4>Working with the Microsoft Dataverse Organization Service</h4>
    <p>
        This chapter introduces participants to the Dataverse Organization Service endpoint and will teach them how to do CRUD operations in .NET using late or early binding.
        The chapter also talks about the how the XRM Tooling SDK can be used to build Windows Application and what the future of the XRM Tooling will be 
    </p>
    <ul>
        <li>What is the Organization Service endpoint in Dataverse</li>    
        <li>The IOrganizationService Interface</li>  
        <li>The OrganizationServiceProxy class</li>
        <li>Early versus late binding when accessing table rows</li>
        <li>An introduction to XRM Tooling and it's future in the Power Platform</li>
        <li>Working with CrmServiceClient</li>
        <li>Use connection strings in XRM Tooling to connect to Dataverse</li>
        <li>Create, update, delete and retrieve table rows using XRM Tooling</li>
        <li>Retrieving data using the QueryExpression and QueryByAttribute classes</li>
        <li>LAB: Writing a Dataverse client application using XRM Tooling</li>
    </ul>

    <h4>Querying Microsoft Dataverse with FetchXML</h4>
    <p>
        When accessing Dataverse as a developer you have several ways to query for data. 
        In this chapter you will learn the syntax of the FetchXML language to query Dataverse.
    </p>
    <ul>
        <li>Introduction to FetchXML</li>
        <li>Writing FetchXML queries</li>
        <li>Using XrmToolBox FetchXML Builder to create FetchXML queries</li>
        <li>Executing FetchXML queries using the Dataverse Web API</li>      
        <li>Executing FetchXML queries using the Dataverse XRM Tooling</li>      
        <li>LAB: Creating and executing FetchXML queries</li>
    </ul>

    <h4>Plug-ins</h4>
    <p>
        A plug-in is custom business logic that you can deploy inside Dataverse to modify or augment the standard behavior of Dataverse. 
        This chapter teaches students how they can write a custom Plug-in in .NET and deploy it to Dataverse. Students also learn how to debug Plug-ins in Dataverse.
    </p>
    <ul>
        <li>Introduction to the Microsoft Dataverse Event Framework</li>
        <li>Plug-in overview</li>
        <li>Writing custom plug-ins</li>
        <li>Register and deploy plug-ins using the Plug-In Registration Tool</li>
        <li>Debugging plug-ins in the Dataverse</li>
        <li>Deploying Plug-Ins with Solutions</li>
        <li>Automate Plug-in deployment using Spkl</li>
        <li>Using Plugin Trace Viewer in XrmToolBox</li>
        <li>LAB: Creating and deploying a Plug-in</li>
    </ul>
    
    <h4>Azure Integrations</h4>
    <p>
        Microsoft Dataverse supports integration with Azure. Developers can register plug-ins with Dataverse that can pass runtime message data, known as the execution context, to one or more Azure solutions in the cloud.
        Besides writing a custom Plugin, Azure is the only other supported solutions for communicating runtime context to external line-of-business (LOB) applications.
    </p>
    <ul>
       <li>Overview of the Azure integration with the Dataverse</li>
       <li>Integration with Azure Service Bus</li>
       <li>Configuring the Azure-aware OOB plug-in</li>
       <li>Write a custom Azure-aware plug-in</li>
       <li>Integration between the Dataverse and Web Hooks</li>
    </ul>
    
    <h4>Creating and using Custom APIs and Actions</h4>
    <p>
        Use Custom APIs to create your own APIs in Dataverse. With a Custom API you can consolidate a group of operations into an API that you and other developers can call in their code.
    </p>
    <ul>
        <li>Introduction to the Microsoft Dataverse Event Framework</li>
        <li>Executing messages via the Web API</li>
        <li>Executing Functions and Actions using the Web API</li>
        <li>Creating Custom Actions</li>
        <li>Creating Custom APIs</li>
        <li>Registering and testing Custom APIs using XrmToolBox</li>
        <li>Using Custom APIs and Actions with the Web API</li>
        <li>Using Custom APIs and Actions in Power Automate</li>
        <li>LAB: Implementing a Custom API</li>
    </ul>

    <h4>client scripting in model-driven apps using JavaScript</h4>
    <p>
        Client-side scripting using JavaScript is one of the ways to apply custom business process logic for displaying data on a form in a model-driven app.
        In this chapter you will learn how the JavaScript Client API of a model-driven app can be used to interact with forms and views 
    </p>
    <ul>
        <li>Creating JavaScript Web Resources</li>
        <li>Handling Form/View and Field events</li>
        <li>Root objects in the Client API object model</li>
        <li>Working with the Client API execution context object</li>
        <li>The Client API Form context object</li>
        <li>Interacting with forms and attributes using the Client API object model</li>
        <li>The Client API grid context object</li>
        <li>The Client API Xrm object</li>
        <li>Best practices in writing client-side Code</li>
        <li>LAB: Using client-side scripting in table forms</li>
    </ul>

    <h4>Customizing the Command Bar in a model-driven app</h4>
    <p>
        The Command Bar is displayed above every form or view in a model-driven app. In this chapter you will learn about how you can customize the Command Bar by adding or removing Commands. 
    </p>
    <ul>
        <li>Overview of the Command Bar</li>
        <li>Available Command Bars in model-driven apps</li>
        <li>Working with Display and Enable rules</li>
        <li>Creating a custom Ribbon Action</li>
        <li>Pass data or URL parameters to a Ribbon Action</li>
        <li>Adding or removing Commands in the Command Bar</li>
        <li>Working with URL addressable forms and views</li>
        <li>Using Ribbon Workbench to customize the command Bar</li>
        <li>LAB: Using Ribbon Workbench to customize the command bar</li>
    </ul>

    <h4>Creating Web Resources</h4>
    <p>
        Web resources represent files that can be used to extend the Dataverse web application such as html files, JavaScript, and CSS, and several image formats.
    </p>
    <ul>
        <li>Web resources overview</li>
        <li>Building custom HTML Web Resources</li>        
        <li>Using the Xrm.WebApi JavaScript object model to access, create and manage records</li>
        <li>LAB: Working with Xrm.WebApi in custom HTML web resources</li>
    </ul>

</body>
</html>

