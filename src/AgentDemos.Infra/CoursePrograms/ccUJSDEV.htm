<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html
  xmlns:mso="urn:schemas-microsoft-com:office:office"
  xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
>
  <head>
    <title>JavaScript Fundamentals</title>
    <meta name="NumberOfDays" content="3" />

    <!--[if gte mso 9
      ]><xml>
        <mso:CustomDocumentProperties>
          <mso:ContentTypeId msdt:dt="string"
            >0x0101009C33340F38E14D1EABEAC83093A8F17200B08BE85894C02E4F9D839A4E1079B6BC</mso:ContentTypeId
          >
        </mso:CustomDocumentProperties>
      </xml><!
    [endif]-->
  </head>

  <body>
    <h2>Learning Goals</h2>
    <p>
      JavaScript is one of the most versatile languages and can be used to code
      applications for the browser, desktop, phone or tablet. This course is the
      primer you need for any of your JavaScript endeavours, whether you want to
      build web sites, web servers with node, mobile apps, office extensions,
      tools, machine learning,... The list goes on. JavaScript is everywhere and
      you need to know it.
    </p>
    <h2>Target Audience</h2>
    <p>
      Developers who want to build rich web applications with JavaScript. This
      course is independent of the server-side technology you are using, so feel
      free to attend whether you use PHP, ASP.NET, Python, Ruby on Rails... A
      basic understanding of programming - in whatever language - is advised.<br />
      Note: This is only about JavaScript, if you want to learn about CSS and
      HTML as well, you need this course:
      <a href="https://u2u.be/cc/UJSWEB"
        >www.u2u.be/training/javascript-html-css-programming</a
      >.
    </p>
    <h2>Course Outline:</h2>

    <h4>JavaScript Introduction</h4>
    <p>
      JavaScript is THE programming language for the web, and it's becoming more
      and more important in other areas as well. In this module we'll take a
      first look at the language and how to make our lives easier by using it
      efficiently.
    </p>
    <ul>
      <li>Why is JavaScript Important?</li>
      <li>What is ECMAScript?</li>
      <li>Performance</li>
      <li>Picking the right Libraries</li>
      <li>Developer Tools</li>
    </ul>

    <h4>JavaScript Language Fundamentals</h4>
    <p>
      In this module, we'll talk about the very basics of JavaScript. JavaScript
      can be a very tricky language, so we'll try to explain a couple of its
      quirks as well. This way, we can avoid surprises later.
    </p>
    <ul>
      <li>Using Variables</li>
      <li>Primitives and Objects</li>
      <li>Functions: more powerful than you'd expect</li>
      <li>Understanding Scope</li>
      <li>Error Handling</li>
      <li>Best Practices</li>
      <li>Strict Mode</li>
      <li>LAB - JavaScript Language Fundamentals</li>
    </ul>

    <h4>JavaScript Collections</h4>
    <p>
      Collections are a big part of OO programming, they allow you to map
      one-to-many or many-to-many relationships, as well as let you work with
      sets of data. In this module, we'll take a look at the different types of
      collections in JavaScript, and their uses.
    </p>
    <ul>
      <li>Storing multiple values in Arrays</li>
      <li>Using Objects as Maps</li>
      <li>Useful Functions and Operators</li>
      <li>Sets, Maps and Others</li>
      <li>LAB - Collections</li>
    </ul>

    <h4>DOM Interaction with JavaScript</h4>
    <p>
      In this module, we will learn how to add client-side interactivity to our
      applications with JavaScript. We will learn how the DOM works, and how we
      can manipulate it, as well as handling user events in the browser.
    </p>
    <ul>
      <li>Introduction to JavaScript</li>
      <li>Understanding the DOM</li>
      <li>DOM Selection and Manipulation</li>
      <li>Event Handling</li>
      <li>LAB: DOM Interaction with JavaScript</li>
    </ul>

    <h4>Object Oriented JavaScript</h4>
    <p>
      Since ECMAScript 2015 we have native classes in JavaScript. Classes can be
      seen as templates for JavaScript Objects, encapsulating data and code to
      work on that data. We'll take a closer look in this module.
    </p>
    <ul>
      <li>Class syntax</li>
      <li>Prototypes</li>
      <li>Using Properties to encapsulate your fields</li>
      <li>The 'this' keyword explained</li>
      <li>LAB - Object Oriented JavaScript</li>
    </ul>

    <h4>Functional JavaScript</h4>
    <p>
      JavaScript not only supports OOP, but also functional programming. This
      paradigm focusses on...FUNCTIONS, duh! Using functional programming, you
      can write more elegant code, which is easier to debug and maintain. This
      module goes over the basics principles and how you can make this
      declarative style work in JavaScript. By going over these concepts, two
      important topics will also be handled: how to copy an object, and
      closures.
    </p>
    <ul>
      <li>Principles of Functional Programming</li>
      <li>Advanced Functional Patterns</li>
    </ul>

    <h4>Dealing with Async Code in JavaScript</h4>
    <p>
      Asynchronous code is really handy in JavaScript, since it allows us to
      keep the UI responsive while running a lot of code. In this module we'll
      see how to make our code run asynchronously.
    </p>
    <ul>
      <li>Threading in JavaScript</li>
      <li>Using Callbacks</li>
      <li>Event Handling</li>
      <li>Working with Promises</li>
      <li>Async and Await</li>
      <li>LAB - Dealing with Async Code</li>
    </ul>

    <h4>Structuring JavaScript Applications and Tooling</h4>
    <p>
      Hey new JavaScript developer! You are using WebPack right? WebPack? Yes,
      and Gulp and npm, you need those. And definitely use TypeScript. It's soo
      good... If your face looks like a big question mark right now, that's
      quite normal. Setting up a JavaScript project can be quite the challenge.
      It's easy to get lost in the overwhelming amount of tools and best
      practices. In this module we'll create some clarity about these tools and
      teach you how to set up a modern JavaScript project.
    </p>
    <ul>
      <li>Using Libraries</li>
      <li>Content Delivery Networks</li>
      <li>Getting Libraries with npm</li>
      <li>Modules versus the Global Object</li>
      <li>Bundling and Minification</li>
      <li>PolyFills and Transpilers</li>
      <li>Typescript</li>
      <li>Using Task Runners</li>
      <li>Tools for Code Quality</li>
      <li>LAB - Structuring an Application</li>
    </ul>

    <h4>Working with Frameworks</h4>
    <p>
      Yes you can do DOM interaction yourself, but ... yeah maybe let a
      framework do it? In this chapter we will look at how frontend development
      changed over time and how we came to using component-based frameworks.
      Which framework? Good (highly debated) question. We will talk shortly
      about the big three: Angular, React and Vue; but stay unopinionated.
    </p>
    <ul>
      <li>The Evolution of Web Development</li>
      <li>Comparing Popular Frameworks such as Angular and React</li>
      <li>LAB - Building a Frontend with a Framework</li>
    </ul>

    <h4>Talking to the Server</h4>
    <p>
      JavaScript runs on the client, data is stored on servers. At some point
      JavaScript needs to talk to the server to get, update, ... some data. In
      this chapter we will see how to talk to a REST service using the fetch
      API. We will briefly show how you can make that REST service using
      server-side JavaScript, a.k.a. nodejs.
    </p>
    <ul>
      <li>Rest Service</li>
      <li>Server-Side JavaScript</li>
      <li>Fetching Data with the Fetch API</li>
      <li>Syncing the Data</li>
      <li>LAB - Consuming a Web API</li>
    </ul>

    <h4>Using Browser APIs</h4>
    <p>
      DOM interaction, fetch API, setTimout, ... all calls JavaScipt makes to
      the browser: "hey borwser, can you do this for me?". The browser gives a
      lot more APIs to JavaScript developers. In this chapter we look at some
      commonly used browser APIs.
    </p>
    <ul>
      <li>The Window Object</li>
      <li>Storing Data on the Client</li>
      <li>Dynamic Graphics</li>
      <li>Accessing the File System</li>
      <li>Device APIs</li>
      <li>Check Compatiblity</li>
    </ul>
  </body>
</html>
