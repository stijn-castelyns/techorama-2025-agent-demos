<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html
  xmlns:mso="urn:schemas-microsoft-com:office:office"
  xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
>
  <head>
    <title>Version Control and Team Collaboration with Git</title>
    <meta name="NumberOfDays" content="1" />

    <!--[if gte mso 9
      ]><xml>
        <mso:CustomDocumentProperties>
          <mso:ContentTypeId msdt:dt="string"
            >0x0101009C33340F38E14D1EABEAC83093A8F17200BBAA9A3DB882F84EA6CED6668F1DEA35</mso:ContentTypeId
          >
        </mso:CustomDocumentProperties>
      </xml><!
    [endif]-->

    <!--[if gte mso 9
      ]><xml>
        <mso:CustomDocumentProperties> </mso:CustomDocumentProperties> </xml
    ><![endif]-->
  </head>

  <body>
    <h2>Learning Goals</h2>
    <p>
      In this training, you will gain the ability to efficiently 
      manage and track changes in your codebase, 
       collaborate seamlessly with team members, and maintain a clean project history. 
       By the end of the training, you will be proficient in making commits, performing pull requests, 
       handling complex branching strategies, resolving conflicts,
       ensuring robust version control and streamlined 
       development processes.
    </p>
    <h2>Target Audience</h2>
    <p>
      This course is designed for developers and IT professionals aiming to master version control with Git
      both in Azure DevOps and GitHub.
    </p>
    <h2>Course Outline</h2>

    <h4>Azure DevOps vs. GitHub</h4>
    <p>
      Azure DevOps is the collaboration hub offered by Microsoft for everyone in
      the development team, including project managers, testers, architects,
      developers and end-users. Likewise, GitHub is used mainly for open source projects.
    </p>
    <ul>
      <li>Introduction to Azure DevOps</li>
      <li>Using GitHub</li>
      <li>LAB: Creating and configuring your project</li>
    </ul>

    <h4>Using Git</h4>
    <p>
      Sources are probably the most important part in any software project and
      we need a way to keep track of all sources and all changes. Azure Repos
      gives you the choice between TFVS and Git for storing your source history,
      branching, merging and everything else required. Here we discuss Git source control.
  </p>
    <ul>
      <li>Version Control concepts</li>
      <li>Distributed Source Control with Git</li>
      <li>Git Clients: Command Line, Visual Studio or Visual Studio Code</li>
      <li>Creating a local repository</li>
      <li>Configuring your git repository</li>
      <li>Checking the status of your repo</li>
      <li>Staging files</li>
      <li>Committing files, and then amending it</li>
      <li>Comparing changes in files</li>
      <li>Reverting commits</li>
      <li>Finding the bad change using git bisect</li>
      <li>Using Aliases to Customize your Experience</li>
      <li>LAB: Working with a local repository</li>
    </ul>

    <h4>Team collaboration with remote repositories</h4>
    <p>
      Multiple developers working on the same code base requires a central 
      place for all your team's code and changes. In Git these are known as remote 
      repositories. Here we discuss team collaboration with Git.
  </p>
    <ul>
      <li>Team collaboration with remote repositories</li>
      <li>Cloning a remote repository</li>
      <li>Synchronizing with a remote repository</li>
      <li>Resolving conflicts</li>
      <li>Using Git Hooks</li>
      <li>LAB: Working with remote repositories</li>
    </ul>

    <h4>Working in isolation with branches</h4>
    <p>
      How can we avoid code changes from one developer interfering with code 
      from others? Branching has always been used to allow developers to complete 
      their changes before integrating them with others.
  </p>
    <ul>
      <li>Adding branches to your workflow</li>
      <li>Branching Strategies - Using GitFlow</li>
      <li>Merge vs. Rebase - keeping a linear history</li>
      <li>Different Merge Strategies, i.e. Squash Merge</li>
      <li>Managing your branches</li>
      <li>LAB: Working with branches in git</li>
    </ul>

    <h4>Team Collaboration with Pull Requests</h4>
    <p>
      Working as a team on the same codebase comes with its own challenges. 
      Factors like false cognates, code conventions, SOLID principles, etc., 
      could result in good or bad code quality. Pull requests allow you to 
      ensure that your code maintains its high quality.
  </p>
    <ul>
      <li>Protecting your branches with pull requests</li>
      <li>Ensuring high quality code with Pull Requests</li>
      <li>Versioning with Git Tags</li>
      <li>Using Forks</li>
      <li>LAB: Team collaboration with Pull Requests</li>
    </ul>
  </body>
</html>
