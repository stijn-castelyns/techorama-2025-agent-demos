<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:mso="urn:schemas-microsoft-com:office:office"
	xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">

<head>
	<title>Building Cross-Platform Apps with .NET MAUI</title>
	<meta name="NumberOfDays" content="5" />
	<!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:ContentTypeId msdt:dt="string">0x0101009C33340F38E14D1EABEAC83093A8F17200A06F8C64409B7D43B4DEA2E4E0563418</mso:ContentTypeId>
</mso:CustomDocumentProperties>
</xml><![endif]-->
</head>
<body>
    <h2>Learning Goals</h2>
	<p>
		Creating a mobile app is seldom creating one app. It's creating one app per platform.
		Learning different platforms is time consuming. MAUI allows us
		to do this in a much more efficient way. One language to rule them all: C#, while staying true to the platform.
        And only one UI paradigm to learn, in which we create the UI only once using XAML.  
		MAUI, which evolved from Xamarin Forms,
		is based upon .NET. By combining reusable C# code and MAUI UI, MAUI is able to create cross-platform native apps with all the features and power of the native platforms.
	</p>
	<h2>Target Audience</h2>
	<p>
		Participants of this course need to have a good understanding of C# and a notion of mobile app development.
	</p>
	<h2>Course Outline</h2>
    <h4>Introduction to MAUI</h4>
	<p>If you have all the time and money in the world, you can build an Android app and an iOS app and maybe a Windows app in
		their native development environment. But what if you don't have all the time in the world?
		How can you write an app that works on Windows, Android, iOS, MacOS and Tizen? This is where MAUI
		comes in.
	</p>
	<ul>
		<li>Mobile Development Options and Problems</li>
		<li>A Uniform Way for Creating UIs</li>
        <li>Creating a .NET MAUI Project</li>
	</ul>
    <h4>Building the UI with XAML</h4>
    <p>
        XAML is the UI-language important for developers using the Microsoft developer stack.
        This module teaches students how to use the XAML language for building desktop and mobile applications, focusing on .NET MAUI.
      </p>
    <ul>
        <li>What is XAML?</li>
        <li>XAML versus Code</li>
        <li>Looking at XAML Basic Syntax</li>
        <li>Understanding XAML Attached Properties</li>
        <li>Nesting Controls</li>
        <li>Extending XAML through Markup Extensions</li>
        <li>Understanding Namespace Mapping</li>
        <li>Naming Elements</li>
    </ul>
    <h4>.NET MAUI Controls Overview</h4>
    <p>
        This module gives you an overview of what kinds of controls are available and how
        to compose them together.
    </p>
    <ul>
        <li>Examining the Class Hierarchy</li>
        <li>The Power of Composability</li>
        <li>Presentation Controls, Command Controls, Editing Controls</li>
        <li>Collection Controls</li>
        <li>The Trouble with Images</li>
        <li>Understanding Bindable Properties</li>
    </ul>
    <h4>Controlling the Layout</h4>
    <p>
        Modern hardware becomes more and more diverse: big screens, double screens, high resolutions, low resolutions, ....
        This does require some special up-front design. In this module, students will learn about the different controls to 
        keep a nice UI on all devices.
    </p>
    <ul>
        <li>Absolute positioning using AbsoluteLayout</li>
        <li>Flexible positioning using FlexLayout</li>
        <li>Tabular positioning with Grid</li>
        <li>Stacking controls with StackLayouts</li>
        <li>Frames, Scrollview and Contentviews</li>
    </ul>
    <h4>Reusability with Resources</h4>
    <p>
        How to reuse objects like colors, sizes, etc. in your application?
        XAML has reuse built in. In this module, students will learn how to reuse objects
        for their applications.
      </p>
    <ul>
        <li>Reusing Objects through Resources</li>
        <li>Resource Inheritance</li>
        <li>Resource Dictionaries</li>
        <li>Theming your Application</li>
        <li>Multilingual Applications</li>
    </ul>
    <h4>Styles and Templates</h4>
    <p>
        How do you apply a style to your whole application? XAML makes this easy with styles and
        templates. In this module, students will learn how to quickly customize their whole
        application with styles and templates.
      </p>
    <ul>
        <li>Why we need Styles</li>
        <li>Default, Implicit and Explicit Styles</li>
        <li>Dynamic and Device styles</li>
        <li>Styling using CSS</li>
        <li>Theming an application</li>
        <li>Introduction to Control Templates</li>
        <li>Control Handlers</li>
        <li>Effects</li>
    </ul>
    <h4>Data Binding</h4>
    <p>
        In many cases, some data needs to be displayed to the user. Changes in data need 
        to be validated and captured efficiently. In this module, students will learn how
        to use data binding to accomplish this.
    </p>
    <ul>
        <li>The Need for Data Binding</li>
        <li>Binding to Properties</li>
        <li>Converting Data for Data Binding</li>
        <li>Binding to Collections</li>
        <li>Understanding Source and BindingContext</li>
        <li>Cell Templates</li>
        <li>Data Templates</li>
        <li>Compiled Bindings</li>
        <li>Using BindableLayout</li>
    </ul>    
    <h4>Building Adaptive and Scalable Layouts</h4>
    <p>Multiple screen-size, portrait-mode, landscape-mode. How do we make a screen that looks good, and which adapts when you
        turn your screen? You will learn all about it in this chapter.
    </p>
    <ul>
        <li>Fixed Versus Adaptive Layout</li>
        <li>Working with the ViewStateManager and Adaptive Triggers</li>
    </ul>
    <h4>Navigation</h4>
    <p>An application with only one screen? It happens, but most application have multiple screens. How do you jump between screens? How do you pass 
        information between screens?
    </p>
    <ul>
        <li>Navigation in .NET MAUI</li>
        <li>NavigationPage, TabbedPage, FlyoutPage and Modal Pages</li>
        <li>Shell Applications</li>
        <li>Route-Based Navigation in Shell</li>
    </ul>
    <h4>Dealing with Different Platforms</h4>
    <p>The fact remains that you are developing for different platforms with different possibilities and a lot of differences. How can you deal with that?</p>
    <ul>
        <li>Shared Projects</li>
        <li>Dependency Injection</li>
        <li>Multi-Targeting Code</li>
        <li>Using Platform-Specific Controls</li>
    </ul>
    <h4>.NET MAUI Essentials</h4>
    <p>.NET MAUI already contains functionalities that help you overcome the differences on the different platforms. Some functionalities normally need to be implemented
        multiple times against the different platforms. In this chapter we will see a whole bunch of functionalities covered for you.
    </p>
    <ul>
        <li>Clipboard, Compass, Contacts, Device Info, Email</li>
        <li>File Picker, Geolocation</li>
        <li>Phone Dialer, Preferences, Secure Storage, Web Authenticator</li>
    </ul>
    <h4>Process Lifecycle Management</h4>
    <p>Applications start and stop constantly. Sometimes you need to save some state for fetching again later. We'll see how to do that here.</p>
    <ul>
        <li>When Apps Run</li>
        <li>Handling Resume, Suspend and Termination</li>
        <li>Supporting Different App Activation Scenarios</li>
        <li>Splash Screens</li>
    </ul>
    
    <h4>Storing Data</h4>
    <p>An application that downloads data to show you, every time you open it. How slow would that be? And what do you
        do with the entered data when you are offline? Storing data on the device itself might help you in those scenarios.
    </p>
    <ul>
        <li>Local Storage</li>
        <li>Working with SQLite</li>
        <li>Using Entity Framework Core</li>
    </ul>
    <h4>Consuming Web Services</h4>
    <p>How to talk to webservices for getting and sending data? You will learn all about it in this chapter.</p>
    <ul>
        <li>HttpClient and WebHttpRequest Class</li>
        <li>Serialization and Deserialization</li>
    </ul>
    <h4>Data Validation</h4>
    <p>
        User input needs to be validated. Are all required properties provided? Do the values match the format?
        In this chapter, you will see several options for validation.
      </p>
    <ul>
        <li>INotifyDataErrorInfo</li>
        <li>Data Annotations</li>
        <li>Validation through Events</li>
        <li>Validation Templates</li>
    </ul>
    <h4>MVVM</h4>
    <p>MVVM is a design pattern which is immensely popular with technologies relying on declarative databinding, like XAML.</p>
    <ul>
        <li>What is the MVVM Pattern?</li>
        <li>Using Commands instead of Event Handling</li>
        <li>Defining the Model</li>
        <li>Adding the ViewModel</li>
        <li>Binding the View to the ViewModel</li>
        <li>Using Behaviors</li>
    </ul> 
    <h4>Notifications</h4>
	<p>Everybody hates those constant on-screen notifications. Learn how to be annoying in this module!</p>
	<ul>
		<li>Platform-specific Notification Mechanisms</li>
		<li>Local Notifications</li>
		<li>Push Notifications</li>
	</ul>   

</body>
</html>