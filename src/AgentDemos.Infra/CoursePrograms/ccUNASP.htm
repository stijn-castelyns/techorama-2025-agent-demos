<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:mso="urn:schemas-microsoft-com:office:office"
  xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
>
  <head>
    <title>Building Web Applications with ASP.NET Core</title>
    <meta name="NumberOfDays" content="5" />

    <!--[if gte mso 9]>
      <xml>
        <mso:CustomDocumentProperties>
          <mso:ContentTypeId msdt:dt="string"
            >0x0101009C33340F38E14D1EABEAC83093A8F17200411861A32B1E654BB5952C0802898AEC</mso:ContentTypeId
          >
        </mso:CustomDocumentProperties>
      </xml>
    <![endif]-->

    <!--[if gte mso 9]>
      <xml>
        <mso:CustomDocumentProperties></mso:CustomDocumentProperties>
      </xml>
    <![endif]-->

    <!--[if gte mso 9]>
      <xml>
        <mso:CustomDocumentProperties></mso:CustomDocumentProperties>
      </xml>
    <![endif]-->

    <!--[if gte mso 9]>
      <xml>
        <mso:CustomDocumentProperties></mso:CustomDocumentProperties>
      </xml>
    <![endif]-->
  </head>

  <body>
    <h2>Learning Goals</h2>
    <p>
      This course will teach you how to build Web applications using the ASP.NET
      Core MVC (Model-View-Controller) framework and patterns in .NET 9. 
    </p>
    <h2>Target Audience</h2>
    <p>
      Students should have a good knowledge of C#. Furthermore, a basic
      knowledge of HTML is advised.
    </p>
    <h2>Course Outline</h2>

    <h4>Introduction to the Web</h4>
    <p>
      You can't start developing for the web without knowing the fundamentals of
      the web. In this module, we explore the details and intricacies of the HTTP
      protocol that makes client-server communication possible on the web. Furthermore, 
      we take a look at the REST architectural style since it is a fundamental concept to be aware of
      when transferring data over HTTP.
    </p>
    <ul>
      <li>Http Methods</li>
      <li>Common HTTP Headers</li>
      <li>Important HTTP Status Codes</li>
      <li>RESTful Architecture</li>
    </ul>

    <h4>ASP.NET Architecture</h4>
    <p>
      In this module you will learn about ASP.NET Core which is Microsoft's web development framework.
      We will see how HTTP requests are processed within ASP.NET as well as a 
      high-level overview of the available technologies for developing web apps within
      ASP.NET Core, such as MVC, Blazor, Razor Pages and Web API.
    </p>
    <ul>
      <li>ASP.NET Core Introduction</li>
      <li>Server- versus Client-Centric Applications</li>
      <li>ASP.NET Core Technology Overview</li>
      <li>ASP.NET Core Request Processing Pipeline</li>
    </ul>

    <h4>The 3 Main ASP.NET Core MVC Components</h4>
    <p>
      In this module you will learn about the MVC pattern and why this pattern
      fits so well in the world of websites and web applicatons. 
      Once you understand MVC, you need to learn how it is implemented in
      ASP.NET Core. This module explores the most important components of the
      framework and how they work together.
    </p>
    <ul>
      <li>The MVC Pattern in ASP.NET Core</li>
      <li>Handling User interaction with Controller</li>
      <li>Rendering the response with MVC Views</li>
      <li>Creating a MVC Model and ViewModel</li>
      <li>Understanding Routing</li>
      <li>LAB: The 3 main ASP.NET Core MVC Components</li>
    </ul>

    <h4>End-point Routing</h4>
    <p>
      On the web the URL decides what the server will do. In ASP.NET Core, this
      is configured in the End-point Routing Middleware. A solid understanding
      of this middleware will allow you to build complex, feature-rich
      applications with ASP.NET Core.
    </p>
    <ul>
      <li>Getting Started with Routing Concepts</li>
      <li>Defining Routing Templates</li>
      <li>Route Parameter Constraints</li>
      <li>Route Parameter Transformers</li>
      <li>Understanding Route Matching</li>
      <li>Using Conventional vs. Attribute Routing</li>
      <li>Routing Attributes</li>
      <li>Request Short Circuiting</li>
      <!-- https://www.youtube.com/watch?v=rXdwX2X4-gw -->
      <li>Handling Routing Errors</li>
      <li>LAB: Routing in ASP.NET Core MVC</li>
    </ul>

    <h4>ASP.NET Core MVC Controllers</h4>
    <p>
      In this module we'll take a closer look at the C in MVC. The Controller
      has a very important role to fulfill: It's the component that ties models,
      views and business logic together when handling a request.
    </p>
    <ul>
      <li>Different types of Action Results</li>
      <li>Working with GET and POST</li>
      <li>Model Binding</li>
      <li>Action Filters</li>
      <li>Redirections</li>
      <li>LAB: using MVC Controllers</li>
    </ul>

    <h4>ASP.NET Services and Dependency Injection</h4>
    <p>
      Services are simple objects used for implementing and encapsulating your business rules and logic.
      By using Dependency Injection we can decouple services from their
      dependencies. On top of improving maintainability and separation of
      concerns, it also makes testing our services a lot easier.
    </p>
    <ul>
      <li>Services</li>
      <li>What is dependency injection?</li>
      <li>Methods of Dependency Injection</li>
      <li>
        Dependency Inversion, Explicit Dependencies, and Inversion of Control
      </li>
      <li>Using Services and Repository</li>
      <li>LAB: Services and Dependency Injection</li>
    </ul>

    <h4>Designing your Web App's Model</h4>
    <p>
      Your website exposes your business data and functionalities to external clients. 
      In this module you will learn how to model the data you expose
      correctly so that it becomes easy to maintain and easy to consume.
      To accomplish this, you will learn about ViewModels, an abstraction created to
      help maintain a clean separation between the Model and Views.
    </p>
    <ul>
      <li>Designing your model</li>
      <li>Passing Data to a View</li>
      <li>ViewModels</li>
      <li>Mapping between Model and ViewModel</li>
      <li>LAB: Using ViewModels</li>
    </ul>

    <h4>Modeling your database with EF Core</h4>
    <p>
      When a database is designed, the idea is to normalize data, i.e. avoid
      duplicate data. When designing the object model for an application you try
      to come up with a design which is best suited for solving your business
      problems. This means that mapping tables to classes one-on-one is often a
      bad idea. Entity Framework Core allows us to map the relational world to
      the world of objects, allowing more complex mapping.
    </p>
    <ul>
      <li>What is Entity Framework Core?</li>
      <li>
        The need for Object Relational Mapping
      </li>
      <li>Methods of configuration</li>
      <li>Creating and applying migrations</li>
      <li>Table and column mapping</li>
      <li>Modeling properties</li>
      <li>Modeling relationships</li>
      <li>LAB: Mapping your entities to the database with EF Core</li>
    </ul>

    <h4>Razor Views</h4>
    <p>
      Discover the power of Razor syntax, a blend of C# and HTML, to craft dynamically rendered web pages on the server.
      In this module we will explore Razor and its syntax. we start with the
      basics, and end with some more advanced scenarios.
    </p>
    <ul>
      <li>Building and Scaffolding Views</li>
      <li>Understanding Layouts and Sections</li>
      <li>Cleaner razor with Tag Helpers</li>
      <li>Re-using Razor with Partial Views</li>
      <li>Introducing Blazor Components</li>
      <li>Adding Interactivity with Blazor Components</li>
      <li>LAB: Sections and TagHelpers</li>
    </ul>

    <h4>DOM Manipulation with JavaScript</h4>
    <p>
      In this module, we will learn how to add client-side interactivity to our
      applications with JavaScript. We will learn how the DOM works, and how we
      can manipulate it, as well as handling user events in the browser.
    </p>
    <ul>
      <li>Introduction to JavaScript</li>
      <li>Understanding the DOM</li>
      <li>DOM Selection and Manipulation</li>
      <li>Event Handling</li>
      <li>LAB: JavaScript Fundamentals in MVC</li>
    </ul>

    <h4>Responsive Web Design with Bootstrap</h4>
    <p>
      Your web site needs to look stunning on any device; whether it's a laptop,
      tablet or phone. Let Bootstrap be your guide towards a consistent looking
      application in the messy world of media queries and responsive design.
    </p>
    <ul>
      <li>Normalizing and Resetting</li>
      <li>The Grid System</li>
      <li>Utility classes</li>
      <li>Bootstrap Components</li>
      <li>Customizing Bootstrap</li>
    </ul>

    <h4>Data Validation</h4>
    <p>
      Validating user input is important for two reasons: firstly, you don't
      want to allow invalid or even dangerous content to be persisted in your
      database. Secondly, when your users make mistakes, you want to help them
      correct those mistakes. In this module we look at best practices,
      validation options, and how to send feedback in case of errors.
    </p>
    <ul>
      <li>Explicit versus Implicit Validation</li>
      <li>Validating data using Data Annotations</li>
      <li>Self-Validating Models</li>
      <li>Validating using the Model Binder</li>
      <li>Client-side validation with Unobtrusive JavaScript</li>
      <li>LAB: Data Validation</li>
    </ul>

    <h4>Structuring an Application in ASP.NET</h4>
    <p>
      Building a maintainable application requires a solid foundation. This chapter dives into the principles of clean architecture
       for ASP.NET, guiding you through designing a project structure that's both robust and adaptable. Learn the best practices 
       for organizing your codebase to facilitate scalability and manage complexity effectively.
    </p>
    <ul>
      <li>Organizing Projects for Maintainability</li>
      <li>Understanding Clean Architecture</li>
      <li>Separation of Concerns in Project Layers</li>
      <li>LAB: Architecting a Maintainable ASP.NET Application</li>
    </ul>


    <h4>Authentication</h4>
    <p>
      Authentication is about identifying who the user of the system is. In this
      chapter we look at the different authentication mechanisms, their
      use-cases, and how to implement them.
    </p>
    <ul>
      <li>Authentication and Authorization in ASP.NET Core</li>
      <li>Username and Password Authentication</li>
      <li>Extending Authentication with your own Data</li>
      <li>Using the Microsoft Identity Platform</li>
      <li>Authorization with Policies</li>
      <li>LAB: Securing your Application</li>
    </ul>
  
    <h4>Building RESTful Services with Web API</h4>
    <p>
      When building more client-centric applications, you will have to send a
      bunch of data back and forth between your client and server. Web API uses
      REST to allow the client to access resources on the server. It is based on
      the same principles as MVC.
    </p>
    <ul>
      <li>What is REST?</li>
      <li>Building a REST service with ASP.NET Core Web API</li>
      <li>Supporting multiple representations: XML and JSON</li>
      <li>LAB: Building a REST API</li>
    </ul>

    <h4>Consuming Web APIs</h4>
    <p>
      After you've built your back-end with Web API, it's time to jump over the
      fence and take a look at how client applications will consume it. In this
      module you will learn how .NET applications, as well as JavaScript
      applications can easily consume your Web API.
    </p>
    <ul>
      <li>Consuming a Web API from .NET</li>
      <li>Best Practices for the .NET HttpClient using IHttpClientFactory</li>
      <li>Using the Swagger CodeGen Client</li>
      <li>Consuming a Web API from JavaScript with Fetch</li>
      <li>Web APIs and JavaScript Frameworks</li>
      <li>LAB: Building a Client for your Web API</li>
    </ul>

      
    <h4>Deploying your Web App</h4>
    <p>
      Launching your web app successfully demands understanding deployment environments. 
      This chapter provides comprehensive insights into cloud and on-premises deployment for ASP.NET apps.
    </p>
    <ul>
      <li>Deployment Fundamentals: Azure vs. On-Premises IIS</li>
      <li>Windows Authentication</li>
      <li>Configuring HTTPS in IIS</li>
      <li>Deploying ASP.NET Apps on Azure</li>
      <li>Setting Up On-Premises Hosting</li>
    </ul>
    
  </body>
</html>
