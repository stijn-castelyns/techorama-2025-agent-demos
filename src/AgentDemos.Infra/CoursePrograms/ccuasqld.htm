<html>

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<title>Developing and optimizing Azure SQL Databases</title>
	<meta name="NumberOfDays" content="5">
</head>

<body>
	<h2>Learning Goals</h2>
	<p>
		This five-day instructor-led course provides students with the knowledge and skills to develop a Microsoft Azure
		SQL
		database, or databases on Azure SQL Managed Instances.
		The course focuses on teaching individuals how to use Azure SQL product features and tools related to
		developing a database: logical
		table design, indexing and query plans. It also focusses on the creation of database
		objects including views, stored procedures, along with parameters, and functions.
	</p>
	<h2>Target Audience</h2>
	<p>
		The primary audience for this course is IT Professionals who want to become skilled
		on Azure SQL database product features and technologies for implementing a database.
	</p>
	<h2>Course outline</h2>

	<h4>Introduction to Database Development</h4>
	<p>
		Before beginning to work with Microsoft Azure SQL Server in either a development or an administration role,
		it is important to understand the scope of the SQL Server platform. In particular, it is useful to understand
		that SQL Server is not just
		a database engine—it is a complete platform for managing enterprise data.
		SQL Server provides a strong data platform for all sizes of organizations, in addition to a comprehensive set of
		tools to make development easier,
		and more robust.
	</p>
	<ul>
		<li>Introduction to the SQL Server Platform</li>
		<li>Azure SQL Database Development Tasks</li>
	</ul>
	<h4>Designing and Implementing Tables</h4>
	<p>
		In a relational database management system (RDBMS), user and system data is stored in tables. Each table
		consists of a set of rows
		that describe entities and a set of columns that hold the attributes of an entity. For example, a Customer table
		might have columns such as
		CustomerName and CreditLimit, and a row for each customer. In Azure SQL databases
		tables are contained within schemas
		that are very similar in concept to folders that contain files in the operating system. Designing tables is one
		of the most important tasks
		that a database developer undertakes, because incorrect table design leads to the inability to query the data
		efficiently.

		After an appropriate design has been created, it is important to know how to correctly implement the design.
	</p>
	<ul>
		<li>Designing Tables</li>
		<li>Data Types</li>
		<li>Working with Schemas</li>
		<li>Creating and Altering Tables</li>
		<li>Lab : Designing and Implementing Tables</li>
	</ul>

	<h4>Advanced Table Designs</h4>
	<p>
		The physical design of a database can have a significant impact on the ability of the database to meet the
		storage and performance
		requirements set out by the stakeholders. Designing a physical database implementation includes planning
		partitioning to manage large tables, and using compression to improve storage and performance. Temporal tables
		offer a straightforward solution to collecting changes to your data.
	</p>
	<ul>
		<li>Partitioning Data</li>
		<li>Compressing Data</li>
		<li>Temporal Tables</li>
	</ul>

	<h4>Ensuring Data Integrity through Constraints</h4>
	<p>
		The quality of data in your database largely determines the usefulness and effectiveness of applications that
		rely on it—the success or failure of an organization or a business venture could depend on it. Ensuring data
		integrity is a critical step in maintaining high-quality data.

		You should enforce data integrity at all levels of an application from first entry or collection through
		storage. SQL Server Management Studio provides a range of features to simplify the job.
	</p>

	<ul>
		<li>Enforcing Data Integrity</li>
		<li>Implementing Data Domain Integrity</li>
		<li>Implementing Entity and Referential Integrity</li>
		<li>Lab : Using Data Integrity Through Constraints</li>
	</ul>

	<h4>Introduction to Indexes</h4>
	<p>
		An index is a collection of pages associated with a table. Indexes are used to improve the performance of
		queries or enforce uniqueness. Before learning to implement indexes, it is helpful to understand how they work,
		how effective different data types are when used within indexes, and how indexes can be constructed from
		multiple columns. This module discusses table structures that do not have indexes, and the different index types
		available in Azure SQL databases.
	</p>
	<ul>
		<li>Core Indexing Concepts</li>
		<li>Data Types and Indexes</li>
		<li>Heaps, Clustered, and Non-clustered Indexes</li>
		<li>Single Column and Composite Indexes</li>
		<li>Lab : Implementing Indexes</li>
	</ul>

	<h4>Designing Optimized Index Strategies</h4>
	<p>
		Indexes play an important role in enabling SQL Server to retrieve data from a database quickly and efficiently.
		This module discusses advanced index topics including covering indexes, the INCLUDE clause, query hints, padding
		and fill factor, statistics, using DMVs, the Database Tuning Advisor, and Query Store.
	</p>
	<ul>
		<li>Index Strategies</li>
		<li>Managing Indexes</li>
		<li>Execution Plans</li>
		<li>The Database Engine Tuning Advisor</li>
		<li>Query Store</li>
		<li>Lab : Optimizing Indexes</li>
	</ul>

	<h4>Columnstore Indexes</h4>
	<p>
		Columnstore indexes are used in large data warehouse solutions by many
		organizations. This module highlights the benefits of using these indexes on large datasets and the
		considerations needed to use columnstore indexes
		effectively in your solutions.
	</p>

	<ul>
		<li>Introduction to Columnstore Indexes</li>
		<li>Creating Columnstore Indexes</li>
	</ul>

	<h4>Designing and Implementing Views</h4>

	<p>
		This module describes the design and implementation of views. A view is a special type of query—one that is
		stored and can be used in other queries—just like a table. With a view, only the query definition is stored
		on disk; not the result set. The only exception to this is indexed views, when the result set is also stored
		on disk, just like a table.

		Views simplify the design of a database by providing a layer of abstraction, and hiding the complexity of
		table joins. Views are also a way of securing your data by giving users permissions to use a view, without
		giving them permissions to the underlying objects. This means data can be kept private, and can only be
		viewed by appropriate users.
	</p>

	<ul>
		<li>Introduction to Views</li>
		<li>Creating and Managing Views</li>
		<li>Performance Considerations for Views</li>
		<li>Lab : Designing and Implementing Views</li>
	</ul>

	<h4>Designing and Implementing Stored Procedures</h4>
	<p>
		This module describes the design and implementation of stored procedures.
	</p>

	<ul>
		<li>Introduction to Stored Procedures</li>
		<li>Working with Stored Procedures</li>
		<li>Implementing Parameterized Stored Procedures</li>
		<li>Controlling Execution Context</li>
		<li>Lab : Designing and Implementing Stored Procedures</li>
	</ul>

	<h4>Designing and Implementing User-Defined Functions</h4>

	<p>
		Functions are routines that you use to encapsulate frequently performed logic. Rather than having to repeat
		the function logic in many places, code can call the function. This makes code more maintainable, and easier
		to debug.

		In this module, you will learn to design and implement user-defined functions (UDFs) that enforce business
		rules or data consistency. You will also learn how to modify and maintain existing functions.
	</p>

	<ul>
		<li>Overview of Functions</li>
		<li>Designing and Implementing Scalar Functions</li>
		<li>Designing and Implementing Table-Valued Functions</li>
		<li>Considerations for Implementing Functions</li>
		<li>Alternatives to Functions</li>
		<li>Lab : Designing and Implementing User-Defined Functions</li>
	</ul>


	<h4>Responding to Data Manipulation via Triggers</h4>

	<p>
		Data Manipulation Language (DML) triggers are powerful tools that you can use to enforce domain, entity,
		referential data integrity and business logic. The enforcement of integrity helps you to build reliable
		applications. In this module, you will learn what DML triggers are, how they enforce data integrity, the
		different types of trigger that are available to you, and how to define them in your database.
	</p>

	<ul>
		<li>Designing DML Triggers</li>
		<li>Implementing DML Triggers</li>
		<li>Advanced Trigger Concepts</li>
		<li>Lab : Responding to Data Manipulation by Using Triggers</li>
	</ul>

	<h4>Using In-Memory Tables</h4>
	<p>
		Higher tiers of Azure SQL databases support in-memory online transaction processing (OLTP)
		functionality features to improve the performance of OLTP workloads. You will see several enhancements,
		such as the ability to alter a memory-optimized table without recreating it. Memory-optimized tables are
		primarily stored in memory, which provides the improved performance by reducing hard disk access.

		Natively compiled stored procedures further improve performance over traditional interpreted Transact-SQL.
	</p>

	<ul>
		<li>Memory-Optimized Tables</li>
		<li>Natively Compiled Stored Procedures</li>
		<li>Lab : Using In-Memory Database Capabilities</li>
	</ul>


	<h4>SQL Server Concurrency</h4>

	<p>
		Concurrency control is a critical feature of multi-user database systems; it allows
		data to remain consistent when many users are modifying data at the same time. This module covers the
		implementation of concurrency in Microsoft SQL Server. You will learn about how Azure SQL databases implement
		concurrency controls, and the different ways you can configure and work with concurrency settings.
	</p>

	<ul>

		<li>Concurrency and Transactions</li>
		<li>Locking Internals</li>
		<li>Lab : Concurrency in Azure SQL databases </li>
	</ul>

	<h4>Performance and Monitoring</h4>

	<p>
		This module looks at how to measure and monitor the performance of your SQL Server
		databases. The first two lessons look at SQL Server Extended Events, a flexible, lightweight event-handling
		system built into the Microsoft SQL Server Database Engine. These lessons focus on the architectural
		concepts, troubleshooting strategies and usage scenarios.
	</p>

	<ul>
		<li>Extended Events</li>
		<li>Working with extended Events</li>
		<li>Live Query Statistics</li>
		<li>Optimize Database File Configuration</li>
		<li>Metrics</li>
	</ul>
</body>

</html>