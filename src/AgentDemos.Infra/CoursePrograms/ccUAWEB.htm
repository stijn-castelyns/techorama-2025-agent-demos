<html xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">

<head>
    <title>Developing and Deploying Web Apps on Microsoft Azure</title>
    <meta name="NumberOfDays" content="5" />
    <!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:ContentTypeId msdt:dt="string">0x0101009C33340F38E14D1EABEAC83093A8F1720098F8182CDBB6424286941E5A39059B61</mso:ContentTypeId>
</mso:CustomDocumentProperties>
</xml><![endif]-->
</head>

<body>
    <h2>Learning Goals</h2>
    <p>
        This training is designed to get developers up to speed with designing, developing,
        hosting, and managing web applications using Microsoft Azure. Azure Web Apps and Azure Functions will contain your code,
        Azure SQL, Cosmos DB and Blob Storage will hold your data and Message Brokers and Logic Apps will wire it all together. 
        You will also learn about security, monitoring and automated deployment.
    </p>
    <h2>Target Audience</h2>
    <p>
        This course is intended for web developers who would like to get familiar
        with the web development services and tools of Microsoft Azure, focusing on the PaaS (Platform as a Service) offerings
        from Microsoft Azure. A basic understanding of C# and ASP.NET is required.
    </p>
    <h2>Course Outline</h2>
    <h4>Microsoft Azure Overview for Developers</h4>
    <p>
        In this module you will get a broad overview of Azure, and the different options for getting your applications
        in the cloud.
    </p>
    <ul>
        <li>Overview of Microsoft Azure</li>
        <li>Usage Scenarios</li>
        <li>Software as a Service (SaaS)</li>
        <li>Platform as a Service (PaaS)</li>
        <li>Infrastructure as a Service (IaaS)</li>
        <li>Pricing</li>
        <li>The Azure Management Portals</li>
        <li>Azure Components</li>
    </ul>

    <h4>App Service Plans</h4>
    <p>
        When hosting web applications, web API's or backends for mobile applications, you need to specify hosting requirements, 
        like needed CPU, memory, scaling, etc... 
        For this we will create Service Plans allowing us to easily decide
        on the capacity needed. The service plan itself determines the region, scaling, and instance size of your
        app services. In short, a service plan defines the resources you might possibly need to host your
        application as well as which datacenter to host them in. 
    </p>
    <ul>
        <li>What is an App Service?</li>
        <li>Purpose of Service Plans</li>
        <li>Creating a Service Plan</li>
        <li>Scaling a Service Plan</li>
        <li>Moving and Cloning Apps to other Service Plans</li>
    </ul>
    <h4>Deploying Resources with ARM and Bicep Templates</h4>
    <p>
        The Azure Resource Manager allows us to group different parts of an application together in a resource group. It
        also allows us to deploy different parts as one whole by using ARM and Bicep templates.
    </p>
    <ul>
        <li>The Azure Resource Manager</li>
        <li>Declarative syntax for ARM Templates</li>
        <li>Getting ARM templates for your Deployed Resources</li>
        <li>Creating Resources with Bicep</li>
        <li>Deploying with Templates</li>
    </ul>
    <h4>App Services: Web Apps</h4>
    <p>
        Adding your website or API to Azure can easily be done with Web Apps. In this module, you will learn how to create
        them, and the different deployment options.
    </p>
    <ul>
        <li>Deploying from Visual Studio</li>
        <li>Configuring App Settings, TLS, Domain Names and Backup Scheduling</li>
        <li>Monitoring your Web App</li>
        <li>Running and Testing Locally</li>
        <li>Spinning up Multiple Website Instances</li>
        <li>Working with Deployment Slots</li>
        <li>API Metadata and CORS</li>
        <li>API Management</li>
        <li>LAB: Festival Web App</li>
    </ul>

    <h4>Storing your Data in the Cloud</h4>
    <p>
        There will often be the need to store data in the cloud. Microsoft offers different ways of storing data within
        a Storage Account depending on what kind of data you would like to store. In this module, you will learn more
        about the storage options available to you in Microsoft Azure: things like Blob, File, Queue and Table-storage and how
        to implement them into your website.
    </p>
    <ul>
        <li>Advantages of Storing Data in the Cloud</li>
        <li>Microsoft Azure Storage Concepts</li>
        <li>Storage APIs: Blob, File, Table and Queue</li>
        <li>Securing your Storage with Shared Access Signatures</li>
        <li>Using the Azure CDN to Serve your Assets</li>
        <li>LAB: Storing Festival Pictures</li>
    </ul>

    <h4>Brokered Messaging in the Cloud</h4>
    <p>
        An important part of application design is integration by sending messages through a message broker.
        This allows asynchronous work dispatch to another application.
        In this module we will focus on the Service Bus with Queues, Topics, and Subscriptions which can
        be used for sending messages between the different parts of your cloud application.
    </p>
    <ul>
        <li>Using Service Bus Queues for Decoupling Applications</li>
        <li>Dispatching Messages with Topics and Subscriptions</li>
        <li>Adding Filters to Subscriptions</li>
        <li>LAB: Eventual Consistency with Service Bus Topics</li>
    </ul>

    <h4>Serverless Computing with Azure Functions</h4>
    <p>
        In certain cases, the only thing you need, is just a piece of code that has to be executed. You don't care about
        the details of the infrastructure, i.e., the hardware, scaling, ... You just need it to execute based on some
        event, like an HTTP call, a file being added to storage container, a message being added to a Service Bus Queue, ...
        This is also referred to as serverless computing. Microsoft Azure offers Azure Functions as a way to provide
        serverless computing.
    </p>
    <ul>
        <li>Serverless Azure Functions</li>
        <li>Development Environments</li>
        <li>Triggers and Bindings</li>
        <li>Hosting and Scaling</li>
        <li>Creating Workflows with Durable Functions</li>
        <li>LAB: Moderate Content using Functions and Cognitive Services</li>
    </ul>

    <h4>Serverless Computing with Logic Apps</h4>
    <p>
        Serverless computing has many faces. E.g.: Azure functions allow you to add serverless code in the cloud. Another one, which you will
        see in this module is Logic Apps. Logic Apps is a more visual way for creating event-based functionalities.
    </p>
    <ul>
        <li>Workflow-like Logic</li>
        <li>Triggering a Logic App</li>
        <li>Connectors and Actions</li>
        <li>Controlling the Flow: Conditions, Variables, and Iterations</li>
        <li>LAB: News gathering, translations and using your own APIs</li>
    </ul>

    <h4>Azure SQL Database</h4>
    <p>
        Many business applications store their data in a relational database. When creating your
        applications in the cloud, several relational database solutions exist. Azure SQL databases is Microsoft's way of
        providing relational databases in the cloud, without the need of setting up your own virtual machine with SQL
        server installed.
    </p>
    <ul>
        <li>Features and Service Tiers</li>
        <li>Azure SQL Server and Azure SQL Database</li>
        <li>Comparison with on-prem SQL</li>
        <li>Backups and Replication</li>
        <li>Authentication and Firewall</li>
        <li>LAB: Storing Structured Data in the Cloud</li>
    </ul>

    <h4>Securing your Applications and APIs with the Microsoft Identity Platform</h4>
    <p>
        Microsoft Entra ID is a cloud-based identity and access management tool. It can easily be used to add identity to
        your existing applications and thus securing them. Besides identity management it can also be used to set up
        OAuth flows to grant rights to your applications.
    </p>
    <ul>
        <li>Microsoft Entra ID</li>
        <li>Basic Principles: Users, Groups, App Registrations, Roles and Scopes</li>
        <li>Tokens and Claims</li>
        <li>Authentication Scenarios</li>
        <li>Microsoft Authentication Library</li>
        <li>LAB: Securing a Web API</li>
    </ul>

    <h4>Eliminate Credentials using Managed Identity</h4>
    <p>
        Where do you put your sensitive data, like passwords, certificates, connection strings, etc.? In the application itself? In the configuration files?
        But what if you really want to keep them secret? You could put them in the Azure Key Vault. But how do you access Key Vault without storing credentials in the app itself?
        The answer lies in Managed Identities.
    </p>
    <ul>
        <li>System-Assigned and User-Assigned Managed Identities</li>
        <li>Accessing Blob Storage, Azure SQL and Service Bus</li>
        <li>Storing secrets using Azure Key Vault</li>
        <li>Managing application settings with Azure App Configuration</li>
        <li>LAB: Accessing Azure SQL and Storage using Managed Identities</li>
    </ul>

    <h4>Logging and Monitoring your Applications with Application Insights</h4>
    <p>
        In this module, you will learn about Applications Insights which allows you to detect and diagnose exceptions
        and application performance issues in the cloud. You will learn how to implement Applications Insights for your
        website to monitor your backend and frontend behavior.
    </p>
    <ul>
        <li>Enabling Application Insights</li>
        <li>Diagnosing Failures</li>
        <li>Diagnosing Dependencies</li>
        <li>Custom events and using Metrics Explorer</li>
        <li>Availability and Performance</li>
        <li>Using Alerts to Detect Live Problems Early</li>
        <li>Snapshot Debugging</li>
        <li>LAB: Adding Application Insights to the Festival Web App</li>
    </ul>

    <h4>Redis Cache</h4>
    <p>
        Once you have your website running, you might need to make it faster. Caching is one of the very first
        things you can implement to increase performance. Redis Cache is a popular open-source cache and is available as a cloud service on Azure.
        In this module, you will learn more about implementing Redis Cache in your websites.
    </p>
    <ul>
        <li>What is Redis Cache</li>
        <li>Data Types you can use in your Cache</li>
        <li>Accessing the Cache</li>
        <li>Redis Messaging</li>
        <li>Implementing Redis Cache in your Website</li>
        <li>LAB: Speeding up Data Retrieval using Redis</li>
    </ul>

    <h4>Storing your Data in Cosmos DB</h4>
    <p>
        Cosmos DB is a multi-model globally distributed NoSQL database service with elastic scalability and allows for multiple
        types of storage and APIs.
    </p>
    <ul>
        <li>What is Cosmos DB</li>
        <li>Choosing between SQL and NoSQL databases </li>
        <li>The different database models</li>
        <li>Scaling and Partitioning</li>
        <li>Using Document Databases using the NoSQL API</li>
        <li>Distributed Relational Databases with Azure Cosmos DB for PostgreSQL</li>
    </ul>
    <h4>Azure Static Web Apps</h4>
    <p>
        Azure Static Web Apps is a service that automatically builds and deploys full stack web apps to Azure from a GitHub or Azure DevOps repository.
        E.g., an Angular application is just a collection of static files and doesn't really require a backend except for API calls.
        Azure Static Web Apps makes it easy to deploy and scale such an app.
    </p>
    <ul>
        <li>Static Web Apps</li>
        <li>API support with Azure Functions</li>
        <li>Integrate with a GitHub Repository</li>
        <li>Automated and Distributed Deployment</li>
        <li>LAB: Creating a Static Web App</li>
    </ul>

</body>
</html>