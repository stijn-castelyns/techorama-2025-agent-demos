<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html
  xmlns:mso="urn:schemas-microsoft-com:office:office"
  xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
>
  <head>
    <title>
      Developing Distributed Applications with Azure and .NET Aspire
    </title>
    <meta name="NumberOfDays" content="3" />

    <!--[if gte mso 9
      ]><xml>
        <mso:CustomDocumentProperties>
          <mso:ContentTypeId msdt:dt="string"
            >0x0101009C33340F38E14D1EABEAC83093A8F1720089232CDC086D1447BD9ED0F9AD575D5C</mso:ContentTypeId
          >
        </mso:CustomDocumentProperties>
      </xml><!
    [endif]-->
  </head>

  <body>
    <h2>Learning Goals</h2>
    <p>
      Dive into the future of scalable software design with our course on
      Distributed Applications using Azure and .NET Aspire. This course is
      designed for developers looking to master the art of building robust,
      high-performance distributed systems. Use .NET Aspire to design,
      implement, and manage applications that are resilient, scalable, and ready
      to meet the demands of modern business environments. You will explore
      microservices architecture, learn best practices for inter-service
      communication, and utilize cloud-native technologies to deploy and manage
      your distributed applications. Whether you're building real-time data
      processing systems, complex web services, or scalable cloud solutions,
      Whether you're working on real-time data processing, complex web services,
      or scalable cloud solutions, this course gives you the skills you need.
    </p>

    <h2>Target Audience</h2>
    <p>
      This course is intended for experienced .NET developers who would like to
      get acquainted with Distributed Applications, Containers and Microservices
      on Azure.
    </p>

    <h2>Course Outline</h2>

    <h4>Introduction to Distributed Applications</h4>
    <p>
      As your application matures, you might encounter some growing pains, this
      is a good sign you might want to step away from a monolithic approach.
      Distributed applications leverage the power of multiple computing
      resources to provide a more robust, scalable, and efficient system.
    </p>
    <ul>
      <li>Application Architecture Throughout the Years</li>
      <li>Containers: The Gateway to Distributed Applications</li>
      <li>Docker Basics</li>
      <li>Strengths and Challenges in Modern Application Architecture</li>
      <li>.NET Aspire to the Rescue</li>
    </ul>

    <h4>.NET Aspire Overview</h4>
    <p>
      .NET Aspire is designed to simplify the development of distributed,
      observable, and production-ready applications using .NET. It provides a
      set of tools, libraries, and templates that streamline the process of
      building applications, particularly those that are cloud-native, meaning
      they are optimized to run in cloud environments.
    </p>
    <ul>
      <li>The Pillars of .NET Aspire</li>
      <li>Orchestration in C# with AppHost</li>
      <li>
        Aspire Dashboard: Get the Best Developer Experience you can, for Free!
      </li>
      <li>
        Observability, Resiliency and Health Checks using Service Defaults
      </li>
      <li>.NET Aspire Deployment Options</li>
      <li>LAB: Getting to Know .NET Aspire</li>
    </ul>

    <h4>Building Distributed Applications with .NET Aspire</h4>
    <p>
      So you've decided to build a distributed application, how do you get
      started and what will you need? In this module we take a look at some of
      the key building blocks of a distributed application such as APIs, client
      applications and data sources.
    </p>
    <ul>
      <li>Basic Building Blocks of a Distributed Application</li>
      <li>Tying the Building Blocks of your Application together</li>
      <li>Connecting Your Projects to eachother with Service Discovery</li>
      <li>
        Should your Development Environment really try to mimic your Production
        Environment?
      </li>
      <li>LAB: Building a Distributed Application with .NET Aspire</li>
    </ul>

    <h4>Enhancing your Application with Pluggable Integrations</h4>
    <p>
      Now that you know how .NET Aspire can tie the parts of your application
      together, why not add some useful resources like a cache, a database, or
      basically any container you want?
    </p>
    <ul>
      <li>What are .NET Aspire Integrations?</li>
      <li>Commonly Used Integrations: Caching, Messaging, Storage,...</li>
      <li>Hosting and Consuming Integrations</li>
      <li>Configuring Integrations</li>
      <li>LAB: Adding existing Integrations to your Application</li>
    </ul>

    <h4>Building a Microservice Architecture</h4>
    <p>
      How do you chop your application into multiple smaller components, called
      &quot;microservices&quot;, and why would you do that? Here, we will show
      you how to create microservice-applications and introduce you to some key
      concepts of microservices like data isolation, resiliency, and
      communication.
    </p>
    <ul>
      <li>Dealing with Evolution in an Application</li>
      <li>Benefits and Drawbacks</li>
      <li>Scaling</li>
      <li>Communication: Client-Service, Service-Service, Event-Based</li>
      <li>Data Isolation per Microservice</li>
      <li>
        Integrating Containers and Microservices into a .NET Aspire Application
      </li>
    </ul>

    <h4>Asynchronous Communication</h4>
    <p>
      In this module, you will learn what event-based communication is and why
      it's such a great fit for microservices.
    </p>
    <ul>
      <li>Communication Patterns</li>
      <li>Event-Based Communication</li>
      <li>Event Bus</li>
      <li>Integration Events</li>
      <li>Eventual Consistency</li>
      <!-- <li>LAB: Eventual Consistency with Service Bus</li> -->
    </ul>

    <h4>Synchronous Communication</h4>
    <p>
      In this module, you will learn how to make synchronous communication more
      reliable by using a number of patterns.
    </p>
    <ul>
      <li>Problems with Direct Communication</li>
      <li>Retry</li>
      <li>Circuit Breaker</li>
      <li>Sidecar Pattern</li>
      <li>Solving Problems with Smart Service Defaults</li>
    </ul>

    <h4>Building Microservices with Dapr</h4>
    <p>
      Where do you run your containers? How do you store data? Which message
      broker will you use? The list of decisions you have to make goes on. But
      how do you shield your code against all those technical details? Dapr is a
      distributed application runtime that keeps your code platform-agnostic.
      This is done through an architecture of pluggable components. Swap out
      your database without even recompiling the code!
    </p>
    <ul>
      <li>Dapr Overview</li>
      <li>Installation</li>
      <li>State Management</li>
      <li>Service Invocation</li>
      <li>Publish and Subscribe</li>
      <li>Bindings</li>
      <li>Observability</li>
      <li>Secrets Management</li>
      <li>LAB: Using Dapr with .NET Aspire</li>
    </ul>

    <h4>Azure for Container Overview</h4>
    <p>
      Azure has many constructs that have to do with containers and
      microservices. It's a bit overwhelming, really. This module will help you
      separate the sheep from the goats, to figure out exactly what you need.
    </p>
    <ul>
      <li>Azure Container Registry</li>
      <li>Hosting Containers: Container Instances, AKS, Service Fabric, ACA</li>
      <li>Deploy with Containers: Web Apps and Functions</li>
    </ul>
    
    <h4>Azure Container Apps</h4>
    <p>
      Managing scalable containers on a Kubernetes cluster in Azure, but without
      the complexity. Sounds like a dream? It's not, this is exactly what Azure
      Container Apps are all about. In this module you will learn how to set up
      a serverless container solution using event-driven scaling.
    </p>
    <ul>
      <li>Container Apps and Environments</li>
      <li>Event-based Scaling with KEDA</li>
      <li>Working with Revisions</li>
      <li>Integrating with Dapr Components</li>
      <li>Network and Ingress</li>
      <li>Authentication and Service Connection</li>
    </ul>

    <h4>Deploying .NET Aspire Applications</h4>
    <p>
      We know Azure Container apps is the preferred deployment environment for
      .NET Aspire, but wouldn't it be great if we could deploy our app anywhere
      we want? and what about CI and CD? In this module we'll explore all our
      options.
    </p>
    <ul>
      <li>Aspire Manifest</li>
      <li>Deploying to Azure Container Apps</li>
      <li>Deploying to AKS using Aspir8</li>
      <li>Continuous Integration & Deployment</li>
      <li>LAB: Deploying to Azure Container Apps</li>
    </ul>
  </body>
</html>
