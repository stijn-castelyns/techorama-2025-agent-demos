<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html
  xmlns:mso="urn:schemas-microsoft-com:office:office"
  xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
>
  <head>
    <title>
      Mastering Infrastructure as Code
    </title>
    <meta name="NumberOfDays" content="3" />
    <!--[if gte mso 9
      ]><xml>
        <mso:CustomDocumentProperties>
          <mso:ContentTypeId msdt:dt="string"
            >0x0101009C33340F38E14D1EABEAC83093A8F1720035FA71C7F94FBE42B4E96DD1659531EC</mso:ContentTypeId
          >
        </mso:CustomDocumentProperties>
      </xml><!
    [endif]-->
  </head>
  <body>
    <h2>Learning Goals</h2>
    <p>
      In the past, managing an IT infrastructure was a hard job. System
      administrators had to manually manage and configure all of the hardware
      and software that was needed for the applications to run.
    </p>
    <p>
      However, in recent years, trends like "Infrastructure as Code" improved
      the way organizations design, develop, and maintain their IT
      infrastructure dramatically. The core idea of "Infrastructure as Code" is
      having a declarative description of the desired infrastructure and an
      automated process to make the production environment match the described
      state. In this course, you will learn about the tools that will help you 
      setup this kind of deployment for your Azure  infrastructure.
      To perform the labs, students can choose between GitHub and Azure DevOps
      since these technologies are almost identical.
    </p>

    <h2>Target Audience</h2>
    <p>
      IT Pros who are interested in learning how to deploy their cloud
      infrastructure in an easy, fully automated way.
    </p>
    <h2>Course Outline</h2>
    <h4>Introduction to GitOps</h4>
    <p>
      GitOps is a way of implementing continuous deployment for cloud native
      applications. It focuses on a developer-centric experience when operating
      infrastructure, by using tools developers are already familiar with,
      including Git and Continuous Deployment tools.
    </p>
    <ul>
      <li>What is GitOps?</li>
      <li>Why should you use GitOps?</li>
      <li>How does GitOps work?</li>
      <li>GitOps Services and Tooling: Git(Hub), Azure DevOps, Kubernetes,
        Terraform, Flux, ...</li>
    </ul>
    <h4>Azure Resource Manager Templates</h4>
    <p>
      To implement infrastructure as code for your Azure resources, ARM
      templates can be used. The template is a JSON file that defines the
      infrastructure and configuration for your project using a declarative
      syntax.
    </p>
    <ul>
      <li>Infrastructure as Code</li>
      <li>Authoring ARM Templates</li>
      <li>Parameters, Variables, Resources, Output</li>
      <li>Nested Templates</li>
      <li>Validating ARM Templates: Test Toolkit, Pester</li>
      <li>LAB: Deploy Azure Resource with ARM Templates</li>
    </ul>
    <h4>Terraform</h4>
    <p>
      Terraform is an open-source infrastructure as code tool that allows you to
      manage many different cloud services. It uses a simplified syntax which
      allows for concise descriptions of your resources.
    </p>
    <ul>
      <li>Terraform Features</li>
      <li>Configuration and Providers</li>
      <li>Variables, Resources, Secrets</li>
      <li>Terraform State</li>
      <li>LAB: Deploy Azure Resources with Terraform</li>
    </ul>
    <h4>The Bicep Language</h4>
    <p>
      Bicep is a transparent abstraction over ARM templates that
      significantly reduces the complexity of your templates. During deployment,
      the Bicep CLI converts a Bicep file into an ARM template.
    </p>
    <ul>
      <li>Benefits of Bicep Versus Other Tools</li>
      <li>Install Bicep Tools</li>
      <li>Author Resources</li>
      <li>Parameters, Variables, Outputs</li>
      <li>Validate Files with Bicep Linter</li>
      <li>Migrate from ARM Templates to Bicep</li>
      <li>LAB: Deploy Azure Resources with Bicep</li>
    </ul>
    <h4>Desired State Configuration (DSC)</h4>
    <p>Automate the configuration of your VMs.</p>
    <ul>
      <li>Benefits of Desired State Configuration</li>
      <li>DSC Components: Configuration, Resources, Compilation</li>
      <li>Enact Your Configuration: Push or Pull mode</li>
      <li>Using Azure Automation for DSC</li>
      <li>LAB: Configure a Virtual Machine with PowerShell DSC</li>
    </ul>
    <h4>Using Git</h4>
    <p>
      Sources are probably the most important part in any software project and
      we need a way to keep track of all sources and their changes. You can use Git to store all the assets, such as templates (ARM,
      Terraform, ...), needed to deploy your infrastructure.
    </p>
    <ul>
      <li>Version Control Concepts</li>
      <li>Distributed Source Control with Git</li>
      <li>Creating a Local Repository</li>
      <li>Cloning a Remote Repository</li>
      <li>Staging Files</li>
      <li>Committing Files</li>
      <li>Branching Strategies</li>
      <li>Using Forks</li>
      <li>Merge vs. Rebase</li>
      <li>Synchronizing with a Remote Repository</li>
      <li>Pull Requests</li>
      <li>LAB: Working with Git</li>
    </ul>
    <h4>Continuous Integration</h4>
    <p>
      To build quality software, and to limit nasty integration problems at the
      end of the project, doing a daily integration build is long regarded as a best
      practice. 
    </p>
    <ul>
      <li>GitHub Actions and Azure DevOps Pipelines</li>
      <li>Continuous Integration</li>
      <li>Understanding GitHub Workflows and DevOps Pipelines</li>
      <li>Triggers, Jobs and Steps</li>
      <li>Using Variables</li>
      <li>Defining and Using Secrets</li>
      <li>LAB: Setting up a Build Definition to Build and Test Your Deployment Target</li>
      <li>LAB: Using CI to Deploy a SQL Server Database Using ARM templates</li>
    </ul>
    <h4>Continuous Deployment</h4>
    <p>
      With continuous deployment you can automatically setup your environment in a
      consistent state, whenever you want. Not only can you deploy your
      application, but you can also setup all the required infrastructure components.
    </p>
    <ul>
      <li>Release Management and Continuous Deployment</li>
      <li>Deploying Artifacts</li>
      <li>Integrating with Azure Using Service Principals or Managed Identities</li>
      <li>Using Environments During Deployment</li>
      <li>LAB: Deploying a Website to an Azure WebApp</li>
      <li>LAB: Deploying a Virtual Machine using Terraform</li>
      <li>LAB: CI/CD Using Bicep to Manage Infrastructure in Azure</li>
    </ul>
    <h4>GitHub Workflow Runners and Azure DevOps Agents</h4>
    <p>
      GitHub Actions and Azure DevOps pipelines require a platform to build and deploy application code and infrastructure components, known as agents/runners.
    </p>
    <ul>
      <li>DevOps Agents and GitHub Runners</li>
      <li>Using DevOps Hosted Agents and GitHub Hosted Runners</li>
      <li>Setting up a Windows Hosted Runner</li>
    </ul>
  </body>
</html>
