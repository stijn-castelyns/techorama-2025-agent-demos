<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">
  <head>
    <title>Developing Cross-Platform Mobile Apps with React Native</title>
    <meta name="NumberOfDays" content="2" />

    <!--[if gte mso 9
      ]><xml>
        <mso:CustomDocumentProperties>
          <mso:ContentTypeId msdt:dt="string"
            >0x0101009C33340F38E14D1EABEAC83093A8F17200677E4181C3511845A1030EA288C53197</mso:ContentTypeId
          >
        </mso:CustomDocumentProperties>
      </xml><!
    [endif]-->
  </head>

  <body>
    <h2>Learning Goals</h2>
    <p>
      In today's world, having a product that works on multiple platforms is quickly becoming essential for a lot of
      businesses. But of course building the same product multiple times isn't only costly, it also introduces some
      technical challenges. React Native aims to reduce the complexity of cross-platform development by letting React
      developers reuse a lot of the skills they already posess.
    </p>
    <h2>Target Audience</h2>
    <p>
      This course targets professional web developers who are familiar with JavaScript (ES2015+) and HTML and are
      looking to develop cross-platform mobile applications. Knowledge of React is recommended, but not necessary.
    </p>
    <h2>Course Outline</h2>

    <h4>Introduction to React Native</h4>
    <p>
      What exactly is React Native, why do you want to use it over other solutions for mobile development, and how do
      you set up your development environment?
    </p>
    <ul>
      <li>The World of Mobile Development</li>
      <li>What is React Native?</li>
      <li>Why Choose React Native?</li>
      <li>Setting up a Development Environment</li>
    </ul>

    <h4>Getting started with React Native</h4>
    <p>
      Hit the ground running and start building your first React Native application. In this chapter we start by taking
      a closer look at how to structure a React Native project and how to debug our application. We continue with some
      React Native basics, and build and run our first React Native application.
    </p>
    <ul>
      <li>Project Structure</li>
      <li>Debugging an Application</li>
      <li>Components</li>
      <li>JSX</li>
      <li>Building our first page</li>
      <li>Adding application state</li>
      <li>Reacting to user input</li>
      <li>LAB: Getting started with React Native</li>
    </ul>

    <h4>Layout and Styling</h4>
    <p>
      Making your app work is one thing, making it usable is another. Mobile apps have to work in different orientations
      and on different screens. In this chapter we'll explore styling and layout, as well as animations that help
      your users navigate your app
    </p>
    <ul>
      <li>Styling and Layout in Mobile Applications</li>
      <li>Layout with Flexbox</li>
      <li>The React Native Styling system</li>
      <li>Adding Animations to enhance User Experience</li>
      <li>LAB: React Native Styling</li>
    </ul>

    <h4>Managing Data and Resources</h4>
    <p>
      Apps need data. Whether they need to load resources from a server, or save user settings to the device. While you
      might already know about the Fetch API for service calls, React Native has its own way of handling local storage
      and assets.
    </p>
    <ul>
      <li>Data in Mobile Apps</li>
      <li>Loading resources from an API</li>
      <li>Working with ListViews</li>
      <li>storing offline data with AsyncStorage</li>
      <li>Working with Assets</li>
      <li>LAB: Storage and Networking</li>
    </ul>

    <h4>Routing and Navigation</h4>
    <p>
      Apps almost always consist of multiple pages. In this chapter we'll explore the different navigation options
      available in React Navigation, and how you can compose them for easy routing.
    </p>
    <ul>
      <li>Introducing React Navigation</li>
      <li>Basic routing with Stack Navigation</li>
      <li>Bringing navigation to the foregroung with Tab Navigation</li>
      <li>Drawer Navigation: Save screen space while retaining easy navigation</li>
      <li>Combining Navigators for a better flow in your app</li>
      <li>LAB: Routing and Navigation</li>
    </ul>
  </body>
</html>
