<html
  xmlns:mso="urn:schemas-microsoft-com:office:office"
  xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
>
  <head>
    <title>Full Stack Development with C# and Blazor</title>
    <meta name="NumberOfDays" content="5" />
    <!--[if gte mso 9
      ]><xml>
        <mso:CustomDocumentProperties>
          <mso:ContentTypeId msdt:dt="string"
            >0x0101009C33340F38E14D1EABEAC83093A8F17200CC4EDD6B6BFD0C4EADC836B510B92464</mso:ContentTypeId
          >
        </mso:CustomDocumentProperties>
      </xml><!
    [endif]-->
  </head>

  <body>
    <h2>Learning Goals</h2>
    <p>
      'Full stack development' encompasses the practice of engaging with every
      layer of technology stacks in software development, typically involving
      both front-end and back-end tasks. Blazor facilitates the 
      creation of modern applications across various
      platforms, including web, single page, mobile, and desktop applications. Blazor
      uniquely enables the use of C#, leveraging the skills and tools familiar
      to .NET developers. Consider attending this training to gain an early
      advantage in mastering Blazor. All examples and labs are based on the
      latest Long-Term Support (LTS) version of .NET and Visual Studio.
    </p>
    <h2>Target Audience</h2>
    <p>
      This training requires a solid understanding of C# and recommends basic
      knowledge of HTML and CSS.
    </p>

    <h2>Course Outline</h2>

    <h4>Introduction to Blazor</h4>
    <p>
      This module gives you an introduction to modern web development. You will
      learn where Blazor positions itself in this story and why it is a great
      choice for building the websites of the future using C#.
    </p>
    <ul>
      <li>Evolution in Web App Development</li>
      <li>What is Blazor and why use it</li>
      <li>Introduction to Component-Based Architecture</li>
      <li>Introducing WebAssembly</li>
    </ul>

    <h4>Blazor Core Concepts</h4>
    <p>
      In this module you'll get acquainted with the most important building
      blocks for any Blazor application. This builds the foundation for all
      following chapters.
    </p>
    <ul>
      <li>Introduction to the Different Render Modes</li>
      <li>Using Visual Studio Templates to Get Started</li>
      <li>Inspecting a Blazor Web App</li>
      <li>Data Binding</li>
      <li>Components</li>
      <li>Services</li>
      <li>Routing</li>
      <li>Debugging, Hot Reload</li>
    </ul>

    <h4>Data Binding</h4>
    <p>
      Data binding allows you to forget about the HTML while writing C# code. It
      allows you to inject data into a view without creating a strong dependency
      between the two. This results into more flexible, testable and
      maintainable code.
    </p>
    <ul>
      <li>Introducing Razor Syntax</li>
      <li>Component to View</li>
      <li>Value Conversion</li>
      <li>View to Component</li>
      <li>Two-Way data binding</li>
      <li>Reporting Changes with StateHasChanged</li>
      <li>LAB: Using Data Binding</li>
    </ul>

    <h4>Components</h4>
    <p>
      In modern web development, we construct applications from components,
      which, in turn, are often composed of smaller components. A Blazor
      component is a self-contained segment of the user interface, designed with
      a single responsibility. Blazor components, crafted from Razor and C#,
      offer ease of understanding, debugging, and maintenance. Naturally, these
      components can be reused across different pages, enhancing development
      efficiency.
    </p>
    <ul>
      <li>What is a Blazor Component?</li>
      <li>Using Multiple Components</li>
      <li>Input and Output</li>
      <li>Cascading Parameters</li>
      <li>Rendering nested content with ChildContent</li>
      <li>Separating the View and View-Model</li>
      <li>Styling Components</li>
      <li>Inheriting a Component</li>
      <li>Building a Component Library</li>
      <li>LAB: Splitting your Application up in Multiple Components</li>
    </ul>

    <h4>Understanding Component Lifecycle</h4>
    <p>
      Blazor components are created, undergo changes, and are eventually
      removed. In this section, we will explore the points within a component's
      lifecycle where you can intercept and interact with these stages.
    </p>
    <ul>
      <li>Understanding Lifecycle Hooks</li>
      <li>Implementing the right Lifecycle Hook(s)</li>
      <li>Limiting unnecessary Rerendering of components with ShouldRender</li>
    </ul>

    <h4>Forms and Validation</h4>
    <p>
      Most applications require users to input data. But how do we present this
      information to the users, capture any changes they make, and validate the
      data?
    </p>
    <ul>
      <li>Working with Forms in Blazor</li>
      <li>Adding validation to your forms</li>
      <li>Disabling the Submit button when validation detects errors</li>
      <li>Using Fluent Validation</li>
      <li>Validation feedback using CSS</li>
      <li>Static server-side rendered forms</li>
      <li>LAB: Creating a Form for Data Entry</li>
    </ul>

    <h4>Services and Dependency Injection.</h4>
    <p>
      Dependency Inversion is a foundational principle of sound Object-Oriented
      design, with Dependency Injection serving as its crucial facilitator. In
      this chapter, we will delve into both dependency inversion and injection,
      exploring their essential roles in Blazor architecture. We will
      demonstrate these concepts by developing a service that abstracts the
      processes of data retrieval and storage. Such services are pivotal in
      enabling components to operate efficiently both on the server and in
      WebAssembly (WASM).
    </p>
    <ul>
      <li>Understanding Dependency Inversion & Injection</li>
      <li>Some Inversion of Control Containers</li>
      <li>Blazor and Dependency Injection</li>
      <li>Building Blazor Services</li>
      <li>LAB: Using Services in Blazor</li>
    </ul>

    <h4>Blazor Data Access with Entity Framework Core</h4>
    <p>
      Data access is a fundamental aspect of any application. In this module, we
      will explore how to use Entity Framework Core (EF Core) to interact with a
      database in a Blazor application.
    </p>
    <ul>
      <li>Introduction to Entity Framework Core</li>
      <li>Setting up EF Core in a Blazor Application</li>
      <li>Scaffolding the UI</li>
      <li>Creating a Database Context</li>
      <li>Using a Service to Interact with the Database</li>
      <li>LAB: Using EF Core to Interact with a Database</li>
    </ul>

    <h4>REST Communication</h4>
    <p>
      So, how do you communicate with a REST service using Blazor? We'll employ
      the HttpClient class, which you're likely familiar with from other .NET
      projects. We will also see how we can use the HttpClient in Blazor WASM
      for data access.
    </p>
    <ul>
      <li>The Need for Communication</li>
      <li>Sending and receiving data</li>
      <li>Using the HttpClient Class and IHttpClientFactory interface</li>
      <li>The HttpClientJSONExtensions Methods</li>
      <li>Data Access in Blazor WASM</li>
      <li>LAB: Consume a Web API</li>
      <li>LAB: Data Access in Blazor WASM</li>
    </ul>

    <h4>Templated Components</h4>
    <p>
      Blazor components are the foundational elements for building websites. But
      how can you create components that are truly reusable?
    </p>
    <ul>
      <li>Building Templated Components</li>
      <li>Using Templated Components</li>
      <li>LAB: Building a Templated Component</li>
    </ul>

    <h4>Built-in Blazor Components</h4>
    <p>
      What components are included with Blazor out-of-the-box? Is it possible to
      dynamically select components for use? Furthermore, does Blazor offer a
      component for displaying a data table that supports sorting and filtering?
      It's worth noting that we will focus on components not discussed
      elsewhere.
    </p>
    <ul>
      <li>Using Dynamic Component</li>
      <li>HeadContent and HeadOutlet</li>
      <li>InputFile of uploading contents</li>
      <li>Rendering large amounts of rows using Virtualization</li>
      <li>Showing tables of data with QuickGrid</li>
      <li>Error Handling with Error Boundaries</li>
      <li>Using the Microsoft Fluent UI Blazor Components</li>
      <li>LAB: Using FluentUI to make a modern website</li>
      <li>LAB: Using QuickGrid to Display Employees</li>
    </ul>

    <h4>Single Page Applications and Routing</h4>
    <p>
      Blazor is a .NET framework that enables the creation of Single Page
      Applications (SPAs), similar to how popular JavaScript frameworks like
      Angular, React, and Vue.js are used. But what exactly is a SPA? We will
      explore how routing allows us to navigate between different sections of an
      SPA and how data can be shared among various components.
    </p>
    <ul>
      <li>What is a Single Page Application?</li>
      <li>Using Layout Components</li>
      <li>Understanding Routing</li>
      <li>Setting the Route Template</li>
      <li>Redirecting to Other Pages</li>
      <li>Handling Location Changing Events</li>
      <li>Preventing Navigation to Avoid Losing Changes</li>
      <li>LAB: Making a SPA Task Manager</li>
    </ul>

    <h4>Introduction to State Management</h4>
    <p>
      How does Blazor manage state, and how can we prevent losing this state
      when a user accidentally refreshes the browser? The module give you an
      introduction to state management and persisting state in Blazor.
    </p>
    <ul>
      <li>Component Level State</li>
      <li>Global State</li>
      <li>Persisting State</li>
      <li>Smart and Dumb Components</li>
      <li>Managing Authentication State</li>
      <li>Lab: Adding State Management to a Web Shop</li>
      <li>Lab: Managing Authentication State</li>
    </ul>

    <h4>Render Modes</h4>
    <p>
      A confusing part of Blazor are the different render modes. In short: a
      component can be interactive or static. This chapter gives a detailed
      overview of all the render modes, how to set a render mode and how to
      inspect which render mode is being used.
    </p>
    <ul>
      <li>Interactive Server</li>
      <li>Interactive WASM</li>
      <li>Interactive Auto</li>
      <li>Static Server with Streamed Rendering and Enhanced Navigation</li>
      <li>Render Mode Inheritance</li>
      <li>Inspect the Render Mode of a Component</li>
      <li>Lab: Making Render Mode Agnostic Components</li>
    </ul>

    <h4>Managing Blazor Applications</h4>
    <p>
      In this module, we focus on managing Blazor applications beyond local
      development. You'll learn how to structure your application for
      scalability, ensure its quality through testing, and prepare it for
      deployment.
    </p>
    <ul>
      <li>Structuring your Application</li>
      <li>Testing your Application</li>
      <li>Deploying your Application</li>
    </ul>
  </body>
</html>
