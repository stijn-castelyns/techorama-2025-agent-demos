<!-- saved from url=(0034)https://www.u2u.be/html/ccudax.htm -->
<html xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
    <title>DAX</title>
    <meta name="NumberOfDays" content="3">
    <meta id="ConnectiveDocSignExtentionInstalled" name="ConnectiveDocSignExtentionInstalled"
        data-extension-version="1.0.6">
    <!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:ContentTypeId msdt:dt="string">0x0101009C33340F38E14D1EABEAC83093A8F17200993D680F3088D74FAE953A7E9771BD32</mso:ContentTypeId>
</mso:CustomDocumentProperties>
</xml><![endif]-->
</head>

<body>

    <h2>Learning Goals</h2>
    <p>
        Power BI is a suite of business analytics tools to analyze data and share insights.
        DAX (short for Data Analysis Expressions) is a language used in Power BI and Analysis Services Tabular Models to
        create derived calculations such as year-to-date, percentage of total, etc.
        In this course you will learn how to use DAX to create measures and other derived calculations. You will
        also learn to use DAX as a query language.
    </p>

    <h2>Target audience</h2>
    <p>
        This course is intended for people who have a background in Business Intelligence and have already built data
        models in Power BI or Analysis Services.
        U2U also offers a 3-day course <a href="https://www.u2u.be/cc/ubipbe">Analyzing your data with Power BI for
            Business Users</a> targeted at people without any skills to build a Tabular Model.
    </p>

    <h2>Course Outline</h2>

    <h4>An Introduction to DAX</h4>
    <p>
        This chapters provides a introduction to the DAX language. Students will learn the different use-cases of the
        DAX language.
    </p>

    <ul>
        <li>DAX Use Cases</li>
        <li>Understanding Calculated Columns and Measures</li>
        <li>Building Tables with DAX</li>
        <li>DAX as a Query Language</li>
        <li>DAX for Row Level Security</li>
        <li>DAX Patterns</li>
        <li>LAB: Creating Calculated Columns, Tables and Measures in DAX</li>
    </ul>

    <h4>Using the DAX Query View</h4>
    <p>
        DAX Query View is a feature in Power BI that allows developers to write, run, and analyze DAX queries for deeper insights into their data models. 
        In this module, you will learn how to use DAX Query View in Power BI Desktop and the Power BI Service, 
        along with an introduction to writing DAX statements and exploring key functions. 
    </p>
    <ul>
        <li>Using the DAX Query View in Power BI Desktop</li>
        <li>Using the DAX Query View in the Power BI Service</li>
        <li>Writing DAX Statements</li>
        <li>Important DAX Functions</li>
        <li>Using INFO. Information Functions</li>
        <li>LAB: Running and Profiling Queries in Power BI Desktop</li>
    </ul>

    <h4>DAX Expressions</h4>
    <p>When writing scalar expressions a good understanding of the DAX data types, operators and functions is needed.
    </p>
    <ul>
        <li>DAX Data Types</li>
        <li>Mathematical, Boolean and String Operators</li>
        <li>The Most Important Scalar Functions in DAX</li>
        <li>Conditional Functions</li>
        <li>Date and Time Functions</li>
        <li>LAB: Evaluating and Writing DAX Expressions</li>
    </ul>

    <h4>Creating DAX Measures</h4>
    <p>
        The CALCULATE function is probably the most used function in DAX when you are defining measures. To really
        understand how to use the CALCULATE function, you must have a good understanding of the concepts of row and
        filter contexts, which are also explained in the chapter.
    </p>
    <ul>
        <li>Row Context vs Filter Context</li>
        <li>Building Measures</li>
        <li>Aggregation Functions</li>
        <li>Defining Measure Tables</li>
        <li>Implicit vs Explicit Measures</li>
        <li>The CALCULATE Function </li>
        <li>Defining Table Scopes</li>
        <li>Using the FILTER, ALL, VALUES and DISTINCT Functions</li>
        <li>LAB: Using CALCULATE</li>
    </ul>

    <h4>Time Intelligence with DAX</h4>
    <p>
        Nearly all analysis happens against different time periods. 
        DAX includes time intelligence functions that enable you to manipulate data using time periods, and then build and compare calculations over those periods.
        Common challenges such as year-to-date, growth calculations, moving averages etc. are covered in this module.
    </p>
    <ul>
        <li>Creating Calendar Tables using CALENDAR and CALENDARAUTO</li>
        <li>Working with Multiple Data Tables</li>
        <li>Marking Tables as Data Tables</li>
        <li>Using the DATEADD and PARALLELPERIOD Functions</li>
        <li>Computing YTD, QTD and MTD Totals</li>
        <li>Comparing Data over Time using DAX</li>
        <li>Calculating Rolling Totals</li>
        <li>Calculating Moving Averages</li>
        <li>Creating Time Intelligence Measures using Bravo</li>
        <li>LAB: Implementing Time Intelligence</li>
    </ul>

    <h4>Working with Calculation Groups</h4>
    <p>Often measures such as a year-to-date (YTD) calculation have to be repeated for
        multiple base measures. Calculation groups provide a template with which
        these repetitive measures can be easily created and maintained.
    </p>
    <ul>
        <li>The Need for Calculation Groups</li>
        <li>Creating Calculation Groups</li>
        <li>Format Strings in Calculation Groups</li>
        <li>Excluding Measures from Calculation Groups</li>
        <li>Combining Calculation Groups with Field Parameters for Dynamic UX</li>
        <li>LAB: Implementing a Time Intelligence Calculation Group</li>
    </ul>

    <h4>Measures: Iterators and Variables</h4>
    <p>When you need to iterate through data iterators such as SUMX become useful. This chapter discusses how to work
        with iterators, how to apply context transitions within iterators and how to use variables to increase readability, performance and expressive power</p>

    <ul>
        <li>The SUMX Aggregation Function</li>
        <li>Linking Tables with RELATED and RELATEDTABLE</li>
        <li>More Iterators: MAXX, RANKX, CONCATENATEX ...</li>
        <li>Using Variables to Increase Readability and Performance</li>
        <li>Context Transition and its Pitfalls</li>
        <li>LAB: Using Iterators in Measures</li>
    </ul>

    <h4>Inspecting and Controlling the Execution Context</h4>
    <p>Often a measure only makes sense in a certain context (e.g. only relevant at the month level, but not the year
        level). In this chapter DAX functions are covered which allow you to inspect the current context such that you
        can protect your measures. A typical use case are percentage of parent calculations, which are discussed in detail.</p>

    <ul>
        <li>HASONEVALUE</li>
        <li>ISFILTERED</li>
        <li>ISCROSSFILTERED</li>
        <li>ISINSCOPE</li>
        <li>SELECTEDVALUE</li>
        <li>ALLSELECTED</li>
        <li>Handling Hierarchies</li>
        <li>Calculating Ratios to Parent Subtotals</li>
        <li>Raising Errors</li>
        <li>Using Visual Calculations</li>
        <li>LAB: Inspecting Execution Context</li>
    </ul>

    <h4>Advanced DAX Constructs</h4>
    <p>In this last chapter some of the more advanced DAX topics are introduced.</p>

    <ul>
        <li>Context Modifiers USERELATIONSHIP, CROSSFILTER, ALLEXCEPT ...</li>
        <li>Expanded Tables</li>
        <li>TREATAS</li>
        <li>CALCULATETABLE</li>
        <li>LAB: Working with Expanded Tables</li>
    </ul>
</body>

</html>