<html>
  <head>
    <title>Querying SQL Server with Transact-SQL</title>
    <meta name="NumberOfDays" content="3" />
  </head>

  <body>
    <h2>Learning Goals</h2>
    <p>
      The goal of this course is to provide students with the technical skills
      required to write basic Transact-SQL queries for Microsoft SQL Server. The
      course covers querying SQL Server 2022 or previous versions as well as
      Azure SQL Databases.
    </p>
    <h2>Target Audience</h2>
    <p>
      This course is intended for SQL Server database administrators and
      developers who are responsible for writing queries but have little to no experience in writing T-SQL SELECT statements.
    </p>
    <h2>Prerequisites</h2>
    <p>This introductory course requires no special skills.</p>

    <h2>Course Outline</h2>
    <h4>Introduction to Transact-SQL and the Querying Tools</h4>
    <p>
      Before you can get started writing T-SQL code, you must master the tool
      that we will mainly use throughout this classroom training: SQL Server
      Management Studio. But there are other useful tools as well to discover in
      this module:
    </p>
    <ul>
      <li>Tabular Data</li>
      <li>Server-Client</li>
      <li>SQL Server Object Hierarchy</li>
      <li>Introduction to SQL Server Management Studio</li>
      <li>Using the Graphical Query Builder in Management Studio</li>
      <li>Working with Azure Data Studio</li>
      <li>Connecting to SQL Server from Excel or Power BI</li>
      <li>A Brief History of SQL Server</li>
      <li>LAB: Learning the Tools</li>
    </ul>

    <h4>SELECT Fundamentals</h4>
    <p>
      The SELECT statement is very important in T-SQL. It allows to retrieve
      data from tables and views. But that data may need to be filtered, both in
      the rows and columns we return, and sorted. Another crucial concept
      discussed in this module is that of expressions, which allow us to combine
      multiple columns into one computed column before we return the result.
    </p>
    <ul>
      <li>Basic SELECT Statement</li>
      <li>T-SQL Expressions</li>
      <li>Fetching Data from Tables</li>
      <li>Filtering Data with the WHERE clause</li>
      <li>Sorting Data</li>
      <li>Combining Result Sets: UNION, EXCEPT and INTERSECT</li>
      <li>LAB: Selecting from the AdventureWorks Database</li>
    </ul>

    <h4>Aggregating Data</h4>
    <p>
      Often the data stored in the database is more detailed than the result we
      are interested in. This module shows how to aggregate multiple values into
      a group, and how to compute aggregated values on top of these groups. The
      following topics are covered in this module:
    </p>
    <ul>
      <li>Using Aggregation Functions</li>
      <li>GROUP BY Fundamentals</li>
      <li>Filtering on Groups Using the HAVING Clause</li>
      <li>Computing Subtotals Using the ROLLUP and CUBE Clauses</li>
      <li>LAB: Aggregating Data</li>
    </ul>

    <h4>Joining Multiple Tables</h4>
    <p>
      Most operational databases are normalized: the data is spread over
      multiple tables. But when building reports, we need to join these
      different tables to get the answer we need. That's why mastering the
      different techniques to combine tables in a single result is crucial. In
      this module we cover two important ways: via joins and via nested queries.
    </p>
    <ul>
      <li>Database Normalization</li>
      <li>Inner Join</li>
      <li>Left, Right and Full Outer Join</li>
      <li>Cross Join</li>
      <li>Joining a table with itself</li>
      <li>Creating Nested Queries</li>
      <li>LAB: Joining Contacts, Employees and More</li>
    </ul>

    <h4>Data Types</h4>
    <p>
      Each expression and each column has a datatype. It is important to be
      familiar with the most used types. When we use multiple datatypes in one
      expression, there will be an implicit conversion to on type. It is the
      type precedence that decides which type is being used, and this has big
      implications on your queris. We can also do explicit conversion between
      types, such that e.g. the format of the date adheres to the locale. This
      module goes over the important information surrounding types in T-SQL.
    </p>
    <ul>
      <li>Text</li>
      <li>Numerical Types</li>
      <li>Date and Time</li>
      <li>Type Precedence</li>
      <li>Type Conversion</li>
      <li>LAB: Datatypes</li>
    </ul>

    <h4>Modifying Data</h4>
    <p>
      Sometimes there is the need to insert new data into the database. Or old
      data needs an update or has to be deleted. This module shows you the
      basics of how this can be done. The following topics are covered in this
      module:
    </p>
    <ul>
      <li>Inserting Data</li>
      <li>Updating Existing Records</li>
      <li>Deleting Data</li>
      <li>Intro Into Constraints</li>
      <li>Understanding Transactions</li>
      <li>Truncating a Table</li>
      <li>LAB: Updating Customers in AdventureWorks</li>
    </ul>

    <h4>Advanced Functions and Operators</h4>
    <p>
      This module looks at some more advanced functions and operators that you
      can use. These can be handy to write more advanced queries more easily.
      For instance, how do you retrieve for each country the three most
      important customers? How do you calculate the day of week from a date? How
      do you convert data stored in columns into rows? This module also looks
      into the OVER clause which has same capabilities as grouping data but with
      some perks.
    </p>
    <ul>
      <li>T-SQL Functions</li>
      <li>User-Defined Functions and Apply Operator</li>
      <li>OVER Clause</li>
      <li>Ranking Functions</li>
      <li>Analytic Functions</li>
      <li>PIVOT and UNPIVOT Operator</li>
      <li>LAB: Advanced Functions and Operators</li>
    </ul>

    <h4>Scripting</h4>
    <p>
      At times you do not only need to write simple SELECT statements, but more
      or less "programs". This module looks into scripting in T-SQL. You will
      learn about special T-SQL constructs like variables and IF...ELSE
      statement. Often logic needs to be used multiple times at different
      places. For this you can create procedures and functions.
    </p>
    <ul>
      <li>T-SQL Scripts</li>
      <li>Stored Procedures</li>
      <li>Creating User-Defined Functions</li>
      <li>LAB: Creating Scripts, Procedures and Functions</li>
    </ul>

    <h4>Levels of Abstraction</h4>
    <p>
      Functions and procedures are ways to abstract away logic. On top of that,
      functions can be used in queries and act either as scalars or tables. Two
      other types of abstractions are introduced in this module: views and
      common table expressions (CTE's). Both will be an abstraction of data and
      will act as a table in your queries. Notice that, in the last two modules,
      we only cover an introduction into these things. For a in depth coverage
      you better attend the
      <a href="/cc/usqld">Developing and optimizing SQL Server databases</a>
      training.
    </p>
    <ul>
      <li>Common Table Expressions</li>
      <li>Views</li>
      <li>Levels of Abstraction</li>
      <li>LAB: Creating and Using CTE's and Views</li>
    </ul>
  </body>
</html>
