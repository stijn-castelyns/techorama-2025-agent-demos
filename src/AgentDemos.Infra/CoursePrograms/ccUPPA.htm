<html></html>
<head>
    <title>Advanced Development with the Power Platform</title>
    <meta name="NumberOfDays" content="3" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
</head>
<body>
    <h2>Learning Goals</h2>
    <p>So, you dipped your toes into the waters of Power Apps? Time to get your boots wet! 
        This training will take you from being an average Power Apps maker to a great one. 
        You'll explore more advanced techniques like Responsive Apps, Components and Custom Connectors. 
        You will get acquainted with Plug-Ins and the integration options with Microsoft Dataverse. 
    </p>

    <h2>Target Audience</h2>
    <p>
        This course is targeted at Power Platform makers who already have a solid understanding of creating Canvas Apps
        and Power Automate Flows. If you have no or limited experience with Power Apps and Power Automate, U2U recommends following
        the 4-day training <a href="https://www.u2u.be/training/power-apps-power-automate">Microsoft Power Apps and Power Automate</a>
        prior to this course.
    </p>
    <h2>Course Outline</h2>

    <h4>Creating Responsive Canvas Apps</h4>
    <p>
        When you create Canvas Apps, they are not responsive by default. They either have a Phone or Tablet layout. You can tweak some app settings and work with formulas to make them responsive. 
        But to create truly responsive Canvas Apps, you will need to work with layout containers. 
        In this chapter you will learn all about the available layout containers and how they can be used to easily create responsive Canvas Apps.
    </p>
    <ul>
        <li>What is a Responsive App?</li>
        <li>Working with Responsive Layout Containers</li>
        <li>Configuring Auto-Layout Containers</li>
        <li>Working with Screen Sizes and Breakpoints</li>
        <li>LAB: Redesign a Budget Tracker Canvas App so it becomes responsive</li>
    </ul>
    
    <h4>Working with Components in Canvas Apps</h4>
    <p>
        Components are reusable building blocks for Canvas Apps so that app makers can create custom controls to use inside an app, or across apps using a component library.
    </p>
    <ul>
        <li>Creating Components and Component Libraries</li>
        <li>Defining Inputs and Outputs</li>
        <li>Using Components</li>
        <li>Canvas Component Properties</li>
        <li>Component Library ALM</li>
        <li>Behavior Formulas for Components</li>
        <li>LAB: Create and Use a Hamburger Menu Component</li>
    </ul>

    <h4>Creating Custom Connectors for the Power Platform</h4>
    <p>
        The Power Platform ships with 1300+ built-in connectors, but what if you need to connect to a custom data source? 
        In that case you can write your own custom connectors and use them in Power Automate and Canvas Apps.
    </p>
    <ul>
        <li>Creating Custom Connectors</li>
        <li>Using Custom Connectors</li>
        <li>Creating Custom Connectors in Solutions</li>
        <li>Using Environment Variables in Custom Connectors</li>
        <li>LAB: Connect to the OMDB API to get movie info in a Canvas App and Flow</li>
    </ul>

    <h4>Storing Data using Microsoft Dataverse</h4>
    <p>
        Almost every Canvas App and Power Automate Flow will have to deal with data somehow. This chapter introduces Microsoft Dataverse as an easy to use and scalable data source compared to storing
        data in Excel files or SharePoint lists.
    </p>
    <ul>
        <li>Using Microsoft Dataverse as a Data Source</li>
        <li>Creating Tables in Microsoft Dataverse</li>
        <li>Creating Columns, Relationships and Views in a Table</li>
        <li>LAB: Create a Dataverse Data Model to Store Car Data</li>
    </ul>

    <h4>Using Microsoft Dataverse in Canvas Apps and Power Automate</h4>
    <p>
       In this chapter you will see how you can build a Canvas App on top of tables in Microsoft Dataverse. See how to work with Lookup, Choice, Image... columns in your Canvas app. 
       Learn about the Power Automate triggers and actions that are specific to Microsoft Dataverse.
    </p>
    <ul>
        <li>Using Microsoft Dataverse in a Canvas App</li>
        <li>Simplify Power FX Code with Dataverse</li>
        <li>Using Microsoft Dataverse in Power Automate</li>
        <li>LAB: Build a Car Management Solution on top of your Dataverse Data</li>
    </ul>


    <h4>Working with Low-Code Plug-Ins</h4>
    <p>
        Low-Code Plug-Ins allow developers to define reusable business logic using the Power FX language. 
        This chapter teaches students how they can create Plug-Ins and how to trigger these from Canvas Apps and Power Automate Flows. 
         </p>
    <ul>
        <li>What are Low-Code Plug-Ins?</li>
        <li>Creating Low-Code Plug-Ins using Power FX</li>
        <li>Instant vs Automated Plug-Ins</li>
        <li>Connect External Data to Plug-Ins</li>
        <li>Using Low-Code Plug-Ins in Canvas Apps</li>
        <li>Using Plug-ins in Power Automate</li>
        <li>LAB: Build and Integrate Plug-Ins in your Car Management Solution</li>
        
    </ul>

    <h4>Monitoring And Debugging Power Apps</h4>
    <p>
        In any application you write, you will need to add error handling logic and display error notifications. 
        You also might want to collect and analyze telemetry data for your apps or integrate your apps with Azure Application Insights. 
        Last but not least, you will see how you can use the built-in monitoring tools of the Power Platform.
    </p>
    <ul>
        <li>Error Handling and Notifications in Canvas Apps</li>
        <li>Integration with Azure Application Insights</li>
        <li>Debugging Canvas Apps with the Built-In Monitor</li>
    </ul>

    <h4>Testing Power Apps</h4>
    <p>
        Testing is an important part of the Software Development Life Cycle.
        Testing can help ensure the quality of the app delivered to customers because it can identify issues or defects early in the release process. 
    </p>
    <ul>
        <li>Canvas App Test Studio Overview</li>
        <li>Creating and Running Test Cases</li>
        <li>Working with Test Suits</li>
        <li>Processing Test Results</li>
        <li>Best Practices and Limitations</li>
        <li>LAB: Build Test Cases and Log Test Results</li>
    </ul>

</body>
</html>