<html xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">

<head>
  <title>Building Desktop Applications with WPF</title>
  <meta name="NumberOfDays" content="5" />

  <!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:ContentTypeId msdt:dt="string">0x0101009C33340F38E14D1EABEAC83093A8F172005A41769330153B4F9EDCB7836BB0AC77</mso:ContentTypeId>
</mso:CustomDocumentProperties>
</xml><![endif]-->
</head>

<body>
  <h2>Learning Goals</h2>
  <p>
    This course will teach you how to build business applications with Windows Presentation Foundation on top of .NET.
    You will learn to create functional and attractive user interfaces using XAML.
    Since most business applications are data-driven, you will learn how to handle data using
    Entity Framework Core and how to consume data from web services.
    Furthermore, you'll get acquainted with the MVVM pattern, making your code easier to maintain and
    test.
  </p>
  <h2>Target Audience</h2>
  <p>
    Participants of this course need to have a good understanding of the .NET platform
    and have a good knowledge of C#.
  </p>

  <h2>Course Outline:</h2>
  <h4>Introduction to Desktop Programming with WPF</h4>
  <p>
    In this module students are introduced to Windows Presentation Foundation (WPF),
    and how this framework can be used to build state of the art
    applications.
  </p>
  <ul>
    <li>Introduction to the WPF Application</li>
    <li>WPF Architecture</li>
    <li>Designer/Developer Productivity: Declarative XAML</li>
    <li>The Visual Studio Designer</li>
    <li>LAB: Creating your first WPF Appplication</li>
  </ul>

  <h4>Introducing XAML</h4>
  <p>
    XAML is the UI-language for developers using the Microsoft developer stack.
    This module teaches students how to use the XAML language for building desktop applications with WPF.
  </p>
  <ul>
    <li>What is XAML?</li>
    <li>XAML versus Code</li>
    <li>Looking at XAML Basic Syntax</li>
    <li>Understanding XAML Attached Properties</li>
    <li>Nesting Controls</li>
    <li>The Content property</li>
    <li>LAB: Working with XAML</li>
  </ul>

  <h4>Inside XAML</h4>
  <p>
    XAML can be extended for your own custom purposes. In this case you need to understand following topics.
  </p>
  <ul>
    <li>Extending XAML through Markup Extensions</li>
    <li>Understanding CLR and XML Namespace Mapping</li>
    <li>Naming Elements</li>
  </ul>

  <h4>Developers and Designers Collaboration</h4>
  <p>
    In a perfect world, any developer is a great designer. Unfortunately this is not the case.
    XAML allows for a clean separation between designing and developing.
  </p>
  <ul>
    <li>Developers versus Designers </li>
    <li>Visual Studio as a Development Tool</li>
    <li>Blend as a Designing Tool</li>
    <li>Overview of Blend</li>
  </ul>

  <h4>WPF Controls</h4>
  <p>
    This module gives you an overview of what kinds of controls are available and how
    to compose them together.
  </p>
  <ul>
    <li>Examining the Class Hierarchy</li>
    <li>Tweaking the UI with Transforms</li>
    <li>The power of Composability</li>
    <li>Content Controls, Container Controls, Header Controls, Item Controls</li>
    <li>Range Controls, using Text Controls</li>
    <li>Understanding Dependency Properties</li>
    <li>Routed Events</li>
  </ul>

  <h4>Introduction to WPF Layout</h4>
  <p>
    Display hardware becomes more and more diverse: big screens, small screens, high and low resolutions, adaptable font
    size.
    This does require some special up-front design. In this module students will learn how to build applications
    that run with all kinds of resolutions and fonts.
  </p>
  <ul>
    <li>Look at WPF Layout Capabilities</li>
    <li>Absolute Layout using Canvas</li>
    <li>Using StackPanel, WrapPanel and DockPanel</li>
    <li>The do-it-all Panel: Grid</li>
    <li>Tweaking using Panel Attached Properties</li>
    <li>LAB: Building a Layout with XAML and Visual Studio</li>
  </ul>

  <h4>Reusability with WPF Resources</h4>
  <p>
    Developers have always used custom built controls to reuse some of their work.
    WPF has reuse built in, so in this module students will learn how to reuse objects
    for their applications.
  </p>
  <ul>
    <li>Reusing Objects through Resources</li>
    <li>Resource Inheritance</li>
    <li>Static Resources</li>
    <li>Dynamic Resources</li>
    <li>Resources and code-behind</li>
    <li>Resource Dictionaries</li>
    <li>LAB: Creating some Resources with Visual Studio</li>
  </ul>

  <h4>Animations</h4>
  <p>
    End users should easily see when an element on your UI is interactive, or when a
    new element has been added to your window. These things can easily be accomplished by
    WPF Animations, which greatly improves the user experience. In this module students will
    learn how provide feedback to the user using animations.
  </p>
  <ul>
    <li>What are Animations?</li>
    <li>Working with Storyboards</li>
    <li>Animations in Code</li>
    <li>Creating Animations in Blend</li>
  </ul>

  <h4>Principles of WPF Styles, Triggers and Templates</h4>
  <p>
    Professionally built web sites use cascading style sheets (css) to quickly change
    the look and feel of the site. WPF takes this to the next level with styles and
    templates. In this module students will learn how to quickly customize their whole
    application with styles and templates.
  </p>
  <ul>
    <li>Why we need Styles</li>
    <li>Example: Restyling a ListBox</li>
    <li>Intro to Templates</li>
    <li>Triggers</li>
    <li>LAB: Create a Button Template with Blend</li>
  </ul>

  <h4>Entity Framework Core</h4>
  <p>
    With .NET also comes a Entity Framework Core.
    A modern, fast Object-Relational Mapper, which can run cross-platform, on Windows, Mac and Linux.
  </p>
  <ul>
    <li>Scaffolding your Project from an Existing Database</li>
    <li>Understanding the Generated Code</li>
    <li>Interacting with the Database with LINQ</li>
    <li>LAB: Scaffolding your Model from an Existing Database</li>
  </ul>

  <h4>Using WPF Data Binding</h4>
  <p>
    Once the data is retrieved, we need to display it to the user and allow changes
    to be validation and captured efficiently. In this module students will learn how
    to use data binding to accomplish this.
  </p>
  <ul>
    <li>The Need for Data Binding</li>
    <li>Binding in Code and Markup</li>
    <li>Introduction to Simple Data Binding</li>
    <li>Converting Data for Data Binding</li>
    <li>Introduction to Complex Data Binding</li>
    <li>Understanding Source and DataContext</li>
    <li>LAB: Databinding to Data with a Parent-Child Relationship</li>
  </ul>

  <h4>Data Validation</h4>
  <p>
    User input needs to be validated. Are all required properties provided? Do the values match the format?
    WPF offers several options for validation that are explored in the following chapter.
  </p>
  <ul>
    <li>Validation Rules</li>
    <li>IDataErrorInfo</li>
    <li>INotifyDataErrorInfo</li>
    <li>Custom Feedback</li>
  </ul>

  <h4>The Visual State Manager and Custom Controls</h4>
  <p>
    When customizing an interactive element for your UI, you need to specify the look and feel
    in all circumstances. The Visual State Manager is a mediator that allows changing styles and templates
    based on certain conditions. In this module students will
    learn how set up and use the Visual State Manager.
  </p>
  <ul>
    <li>What is the Visual State Manager? </li>
    <li>Parts, States, Transitions and State Groups</li>
    <li>Responding to State Changes</li>
    <li>Custom Controls with the Visual State Manager</li>
    <li>Using the Visual State Manager for Responsive Layout</li>
    <li>Using the Visual State Manager in Blend</li>
    <li>LAB: Customizing a Control with Visual State Manager</li>
  </ul>
  <h4>Introduction to the MVVM Pattern</h4>
  <p>MVVM is a version of the MVC pattern designed specifically for WPF, which heavily relies on Data Binding. 
    It allows to completely decouple the UI from the business logic, making your code easier to test and maintain.
  </p>
  <ul>
    <li>What is the MVVM Pattern?</li>    
    <li>Defining the Model</li>
    <li>Adding the ViewModel</li>
    <li>Binding the View to the ViewModel</li>
    <li>Using Commands instead of Event Handling</li>
    <li>LAB: Adding a View and ViewModel to a WPF Application</li>
  </ul>

  <h4>Behaviors</h4>
  <p>
    "If this then that", that's what behaviors are all about. It allows you to set up new functionality for an existing
    control in a declarative and reusable way.
  </p>
  <ul>
    <li>Behaviors</li>
    <li>Triggers</li>
    <li>Built-in Behaviors</li>
    <li>Custom Behavior</li>
  </ul>
  <h4>Dependency Injection in WPF</h4>
  <p>
    When writing code, you have to make sure you are not introducing unnecessary dependencies on other objects.
    Dependencies will just cost you on the long run since they are harder to maintain, not easily testable,
    exchangeable, ... . If you need to depend on another, then depend on the interface. Interfaces describe the
    dependency, but do not force it. Now, you don't want those dependencies to be filled hard coded and this is where
    dependency injection (DI) can help you. Dependency injection can help you at runtime dynamically deciding which
    implementations to plug into the dependencies.
  </p>
  <ul>
    <li>What is Tight Coupling and how to prevent it?</li>
    <li>Using Inversion of Control (IoC) containers.</li>
    <li>Constructor and Property injection.</li>
    <li>Microsoft.Extensions.DependencyInjection as an example.</li>
  </ul>

  <h4>Introducing ASP.NET Web API</h4>
  <p>This part will show students how to create and consume web services with Web API.
  <p>
  <ul>
    <li>REST Services</li>
    <li>Architecture</li>
    <li>CRUD Operations</li>
    <li>Feature Overview</li>
  </ul>

  <h4>Consuming a ASP.NET Web API REST Service with HttpClient</h4>
  <ul>
    <li>HttpClient and WebHttpRequest Class</li>
    <li>JSON Serialization and Deserialization</li>
    <li>LAB: Consuming a REST service from WPF</li>
  </ul>

  <h4>Deploying your WPF Windows Applications</h4>
  <p>
    This module will show students how to deploy their WPF application
  </p>
  <ul>
    <li>Using XCOPY deployment</li>
    <li>Using Click-Once</li>
    <li>Using an Installer</li>
  </ul>
</body>

</html>