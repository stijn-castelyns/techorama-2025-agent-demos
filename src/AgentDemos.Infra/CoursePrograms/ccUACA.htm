<html
  xmlns:mso="urn:schemas-microsoft-com:office:office"
  xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
>
  <head>
    <title>Microsoft Azure Architecture Master Class</title>
    <meta name="NumberOfDays" content="4" />

    <!--[if gte mso 9
      ]><xml>
        <mso:CustomDocumentProperties>
          <mso:ContentTypeId msdt:dt="string"
            >0x0101009C33340F38E14D1EABEAC83093A8F17200876CB381AC859648A4F6574F8C996160</mso:ContentTypeId
          >
        </mso:CustomDocumentProperties>
      </xml><!
    [endif]-->
  </head>

  <body>
    <h2>Learning Goals</h2>
    <p>
      The cloud is an excellent environment for building applications that are resilient, 
      highly available, performant, and hopefully not too expensive. But how do you 
      achieve those goals? In this training, we begin by examining potential problems 
      that a cloud developer/architect may encounter. Then, we explore solutions using 
      proven patterns. Finally, we delve into various technologies available in Azure 
      to implement these patterns. The focus of this training is on concepts and patterns 
      that apply to any cloud environment. We do not delve into the technical details of 
      each Azure resource.
    </p>
    <h2>Target Audience</h2>
    <p>
      This advanced course is designed for individuals aspiring to become a cloud architects in 
      Microsoft Azure. The goal is to develop cloud-native applications, 
      with a focus on PaaS (Platform-as-a-Service) while also covering relevant infrastructure 
      topics. Participants in this course should have a strong developer background and a 
      good understanding of Azure. Should you want to learn 
      to develop on Azure we have <a href="/cc/uweba">Developing & Deploying Web Apps on Microsoft Azure</a>
    </p>
    <h2>Course Outline</h2>

    <h4>Azure Architecture Introduction</h4>
    <p>
      An architecture will look very different depending on what you're focusing on. 
      Do you want it to be fast, reliable, or cheap? You can't have it all, but you 
      can optimize for more than one thing. These considerations will drive decisions 
      in all following topics.
    </p>
    <ul>
      <li>Azure Global Infrastructure</li>
      <li>
        Architectural Building Blocks: Applications, Data, Communication and
        Others
      </li>
      <li>Considerations: Availability, Resiliency, Performance, Cost, ...</li>
    </ul>

    <h4>Microservices</h4>
    <p>
      By splitting up a monolith into bite-size microservices, you make your application 
      a lot more suitable for the cloud. Although this is not a must, most systems will 
      consist of various running applications that will need to communicate.
    </p>
    <ul>
      <li>Dealing with Evolution in an Application</li>
      <li>Benefits and Drawbacks</li>
      <li>Communication: client-service, service-service</li>
      <li>Data Isolation</li>
    </ul>

    <h4>Scaling an Application in Azure</h4>
    <p>
      Scaling an application has many benefits: Your application becomes more
      reliable, faster and handle more throughput. There are many options on how
      to scale an application in the cloud. In this module, we'll take a look at
      key benefits and drawbacks of each one.
    </p>
    <ul>
      <li>Using an App Service Plan</li>
      <li>Using an Orchestrator</li>
      <li>Serverless</li>
      <li>Multi-Region</li>
      <li>Load Balancing</li>
      <li>
        Azure Resources: Traffic Manager, Front Door, Load Balancer, Application
        Gateway
      </li>
      <li>LAB: Setting up Active/Passive Failover</li>
    </ul>

    <h4>SQL versus NoSQL</h4>
    <p>
      Backend developers are typically tied to their relational databases, while 
      JavaScript developers often favor NoSQL. So, which one is better? Well, 
      both can be great, but sometimes the unknown is unloved. In this module, 
      we'll explore the key differences.
    </p>
    <ul>
      <li>Schemas and Relations</li>
      <li>Data Consistency</li>
      <li>Read and Write Performance</li>
      <li>Partitioning and Scaling</li>
      <li>Azure Resources: Azure SQL, Cosmos DB</li>
      <li>LAB: Designing a NoSQL Database</li>
    </ul>

    <h4>Scaling a Database in Azure</h4>
    <p>
      Choosing the wrong technology or a poor scaling strategy for data can result 
      in significant expenses. In this module, we'll learn how to avoid such pitfalls.
    </p>
    <ul>
      <li>Vertical versus Horizontal Scaling</li>
      <li>Partitioning and Sharding</li>
      <li>Multi-Region</li>
      <li>Azure Resources: Azure SQL, Cosmos DB</li>
      <li>LAB: Disaster Recovery with Azure SQL</li>
    </ul>

    <h4>Caching Strategies</h4>
    <p>
      Scaling is beneficial, but it can also become complex and costly. In this 
      module, you will learn about various techniques to enhance performance 
      without the need for scaling.
    </p>
    <ul>
      <li>Azure Redis Cache</li>
      <li>Cache-Aside Pattern</li>
      <li>Read-Through and Write-Through</li>
      <li>Materialized View Pattern</li>
      <li>Valet Key Pattern</li>
      <li>Azure CDN</li>
    </ul>

    <h4>Synchronous Communication</h4>
    <p>
      This module focuses on direct communication between applications. This means 
      using things like REST or gRPC. We'll take a look at some patterns to improve 
      resiliency and reduce complexity.
    </p>
    <ul>
      <li>Retry and Circuit Breaker</li>
      <li>Throttling</li>
      <li>Bulkhead Pattern</li>
      <li>Ambassador Pattern</li>
      <li>LAB: Using the Circuit Breaker Pattern</li>
    </ul>

    <h4>Asynchronous Communication</h4>
    <p>
      Asynchronous communication is much more reliable than synchronous
      communication. In this module, you'll learn which common problems it
      solves, some useful patterns and clarify some of the confusing terminology
      often used with this type of communication.
    </p>
    <ul>
      <li>Messages, Events and Commands</li>
      <li>Queue-Based Load Leveling</li>
      <li>Event-Based Communication</li>
      <li>Asynchronous Request-Reply</li>
    </ul>

    <h4>Designing a Message Broker in Azure</h4>
    <p>
      Understanding the different offerings for message brokers is key to creating 
      good integration. You need to know how to handle heavy loads, large messages, 
      and keep things affordable and secure.
    </p>
    <ul>
      <li>Partitioning</li>
      <li>Push versus Pull</li>
      <li>Pub-sub Mechanisms</li>
      <li>Claim-Check Pattern</li>
      <li>Azure Resources: Service Bus, Event Grid, Storage Queues</li>
    </ul>

    <h4>Data Consistency</h4>
    <p>
      Most likely, not all of your data will end up into a single normalized
      database. Chances that your data will be scattered all over the place are
      much higher. So, how do you keep things consistent? And what if something
      fails? Don't worry, my friend, this module will explain everything.
    </p>
    <ul>
      <li>Strong Consistency</li>
      <li>CAP Theorem</li>
      <li>Eventual Consistency</li>
      <li>Outbox Pattern</li>
      <li>Compensating Transaction Pattern</li>
      <li>LAB: Implementing Eventual Consistency</li>
    </ul>

    <h4>CQRS and Event Sourcing</h4>
    <p>
      CRUD is the norm but has its limitations. This includes performance and
      consistency. By separating read and update operations, CQRS can overcome
      these limitations, including performance and consistency.
    </p>
    <ul>
      <li>The Problem with CRUD</li>
      <li>Read and Write Models</li>
      <li>Commands</li>
      <li>Event Store</li>
      <li>LAB: Implementing a CQRS Shopping Cart</li>
    </ul>

    <h4>External Communication</h4>
    <p>
      There are many concerns when communicating with the external world. Most of 
      them relate to security, but the fact that protocols are usually restricted 
      to HTTP can also be a problem.
    </p>
    <ul>
      <li>API Gateway</li>
      <li>Backend for Frontends</li>
      <li>Asynchronous Request-Reply</li>
      <li>Webhooks</li>
      <li>Azure Resources: API Management, Front Door, Logic Apps</li>
      <li>LAB: Accessing Pet Scans with Logic Apps</li>
    </ul>

    <h4>Security Concerns</h4>
    <p>
      Every developer knows about authentication and authorization. But there
      are other security concerns when deploying to the cloud.
    </p>
    <ul>
      <li>Options for Storing Sensitive Data</li>
      <li>Azure Key Vault and Managed Identity</li>
      <li>Service Authentication</li>
      <li>
        Security on Infrastructural Level: Virtual Networks, Firewalls, ...
      </li>
      <li>Gatekeeper Pattern</li>
    </ul>
  </body>
</html>
