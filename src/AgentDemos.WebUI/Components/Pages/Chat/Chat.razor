@using System.ComponentModel
@using AgentDemos.Agents
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.Agents
@using Microsoft.SemanticKernel.ChatCompletion
@using System.Diagnostics
@implements IDisposable
<h1>Welcome to U2U!!</h1>
<div class="chat-component">
  <ChatHeader 
  OnNewChat="@ResetConversationAsync" 
  OnModelSelected="@OnModelSelected" 
  InitialModel="@ModelId" />

  <ChatMessageList Messages="@chatThread.ChatHistory" InProgressMessage="@currentResponseMessage">
    <NoMessagesContent>
    </NoMessagesContent>
  </ChatMessageList>

  <div class="chat-container">
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
  </div>
</div>

@code {
  [Parameter]
  public required ChatCompletionAgent Agent { get; set; }

  [Parameter]
  public string Title { get; set; } = "Chat";

  [Parameter]
  public string ModelId { get; set; } = "gpt-4.1-mini";

  [Parameter]
  public EventCallback<string> OnModelChanged { get; set; }

  private ChatHistoryAgentThread chatThread = new();
  private CancellationTokenSource? currentResponseCancellation;
  private ChatMessageContent? currentResponseMessage;
  private ChatInput? chatInput;
  private string currentModelId = "gpt-4.1-mini";
  private string currentServiceId = "gpt-4.1-mini-service";

  protected override void OnInitialized()
  {
    chatThread = new ChatHistoryAgentThread(new ChatHistory());
    currentModelId = ModelId;
    currentServiceId = $"{ModelId}-service";
    ResetConversationAsync();
  }

  private void OnModelSelected(string selectedModel)
  {
    currentModelId = selectedModel;
    currentServiceId = $"{selectedModel}-service";

    // Update the agent's execution settings
    var executionSettings = U2UAgentFactory.GetPromptExecutionSettings(currentModelId, currentServiceId);

    OnModelChanged.InvokeAsync(selectedModel);
  }

  private async Task AddUserMessageAsync(ChatMessageContent userMessage)
  {
    CancelAnyCurrentResponse();

    // Add the user message to the conversation
    chatThread.ChatHistory.Add(userMessage);
    await chatInput!.FocusAsync();

    using var parentActivity = new Activity("AgentInvocation")
        .SetTag("agent.name", Agent.Name)
        .SetTag("chat.thread.id", chatThread.Id)
        .Start();

    currentResponseMessage = new ChatMessageContent(AuthorRole.Assistant, "");
    currentResponseCancellation = new();

    // Get the currently selected agent

    await foreach (var response in Agent.InvokeAsync(thread: chatThread, cancellationToken: currentResponseCancellation.Token, options: new AgentInvokeOptions()
    {
        KernelArguments = new KernelArguments(U2UAgentFactory.GetPromptExecutionSettings(currentModelId, currentServiceId))
    }))
    {
      ChatMessageItem.NotifyChanged(currentResponseMessage);
    }

    // Clear the in-progress response
    currentResponseMessage = null;
  }

  private void CancelAnyCurrentResponse()
  {
    // If a response was cancelled while streaming, include it in the conversation so it's not lost
    if (currentResponseMessage is not null)
    {
      chatThread.ChatHistory.Add(currentResponseMessage);
    }

    currentResponseCancellation?.Cancel();
    currentResponseMessage = null;
  }

  private async Task ResetConversationAsync()
  {
    CancelAnyCurrentResponse();
    chatThread.ChatHistory.Clear();
    // await chatInput!.FocusAsync();
  }

  public void Dispose()
      => currentResponseCancellation?.Cancel();
}
