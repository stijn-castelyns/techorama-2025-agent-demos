@page "/"
@using System.ComponentModel
@using AgentDemos.Agents
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.Agents
@using Microsoft.SemanticKernel.ChatCompletion
@using System.Diagnostics
@inject NavigationManager Nav
@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<div class="agent-selector">
  <select @bind="selectedAgentType" @bind:after="OnAgentTypeChanged" class="form-select">
    @foreach (var agentType in Enum.GetValues<AgentType>())
    {
      <option value="@agentType">@GetAgentDisplayName(agentType)</option>
    }
  </select>
</div>

<ChatMessageList Messages="@chatThread.ChatHistory" InProgressMessage="@currentResponseMessage">
  <NoMessagesContent>
  </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
  @* <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" /> *@
  <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
</div>

@code {
  private enum AgentType
  {
    CourseRecommendation,
    Sql,
    DataAnalysisCC,
    Reporting
  }

  private ChatHistoryAgentThread chatThread = new();
  private CancellationTokenSource? currentResponseCancellation;
  private ChatMessageContent? currentResponseMessage;
  private ChatInput? chatInput;
  private ChatSuggestions? chatSuggestions;
  private AgentType selectedAgentType = AgentType.Reporting;
  private Dictionary<AgentType, ChatCompletionAgent> agents = new();

  [Inject]
  public Kernel Kernel { get; set; }

  protected override void OnInitialized()
  {
    chatThread = new ChatHistoryAgentThread(new ChatHistory());

    // Initialize all available agents
    agents[AgentType.CourseRecommendation] = U2UAgentFactory.CreateCourseRecommendationAgent(Kernel.Clone());
    agents[AgentType.Sql] = U2UAgentFactory.CreateSqlAgent(Kernel.Clone());
    agents[AgentType.DataAnalysisCC] = U2UAgentFactory.CreateDataAnalysisCCAgent(Kernel.Clone());
    agents[AgentType.Reporting] = U2UAgentFactory.CreateReportingAgent(Kernel.Clone());
  }

  private string GetAgentDisplayName(AgentType agentType)
  {
    return agentType switch
    {
      AgentType.CourseRecommendation => "Course Recommendation Agent",
      AgentType.Sql => "SQL Agent",
      AgentType.DataAnalysisCC => "Data Analysis Agent",
      AgentType.Reporting => "Reporting Agent",
      _ => agentType.ToString()
    };
  }

  private void OnAgentTypeChanged()
  {
    // Reset the conversation when switching agents
    ResetConversationAsync();
  }

  private async Task AddUserMessageAsync(ChatMessageContent userMessage)
  {
    CancelAnyCurrentResponse();

    // Add the user message to the conversation
    chatThread.ChatHistory.Add(userMessage);
    chatSuggestions?.Clear();
    await chatInput!.FocusAsync();

    using var parentActivity = new Activity("AgentInvocation")
     .SetTag("agent.type", selectedAgentType.ToString())
     .SetTag("chat.thread.id", chatThread.Id)
     .Start();

    currentResponseMessage = new ChatMessageContent(AuthorRole.Assistant, "");
    currentResponseCancellation = new();

    // Get the currently selected agent
    var currentAgent = agents[selectedAgentType];

    await foreach (var response in currentAgent.InvokeAsync(thread: chatThread, cancellationToken: currentResponseCancellation.Token))
    {
      ChatMessageItem.NotifyChanged(currentResponseMessage);
    }


    // Store the final response in the conversation
    currentResponseMessage = null;
  }

  private void CancelAnyCurrentResponse()
  {
    // If a response was cancelled while streaming, include it in the conversation so it's not lost
    if (currentResponseMessage is not null)
    {
      chatThread.ChatHistory.Add(currentResponseMessage);
    }

    currentResponseCancellation?.Cancel();
    currentResponseMessage = null;
  }

  private async Task ResetConversationAsync()
  {
    CancelAnyCurrentResponse();
    chatThread.ChatHistory.Clear();
    chatSuggestions?.Clear();
    await chatInput!.FocusAsync();
  }

  public void Dispose()
      => currentResponseCancellation?.Cancel();
}

